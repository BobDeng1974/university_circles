// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package home

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// HomePicture is an object representing the database table.
type HomePicture struct {
	ID           uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID      string    `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	ThumbnailUrl string    `boil:"thumbnailUrl" json:"thumbnailUrl" toml:"thumbnailUrl" yaml:"thumbnailUrl"`
	MiddlePicUrl string    `boil:"middlePicUrl" json:"middlePicUrl" toml:"middlePicUrl" yaml:"middlePicUrl"`
	PicUrl       string    `boil:"picUrl" json:"picUrl" toml:"picUrl" yaml:"picUrl"`
	Format       string    `boil:"format" json:"format" toml:"format" yaml:"format"`
	Width        int       `boil:"width" json:"width" toml:"width" yaml:"width"`
	Height       int       `boil:"height" json:"height" toml:"height" yaml:"height"`
	Type         int8      `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt    time.Time `boil:"createdAt" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *homePictureR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L homePictureL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HomePictureColumns = struct {
	ID           string
	OwnerID      string
	ThumbnailUrl string
	MiddlePicUrl string
	PicUrl       string
	Format       string
	Width        string
	Height       string
	Type         string
	CreatedAt    string
}{
	ID:           "id",
	OwnerID:      "owner_id",
	ThumbnailUrl: "thumbnailUrl",
	MiddlePicUrl: "middlePicUrl",
	PicUrl:       "picUrl",
	Format:       "format",
	Width:        "width",
	Height:       "height",
	Type:         "type",
	CreatedAt:    "createdAt",
}

// Generated where

var HomePictureWhere = struct {
	ID           whereHelperuint
	OwnerID      whereHelperstring
	ThumbnailUrl whereHelperstring
	MiddlePicUrl whereHelperstring
	PicUrl       whereHelperstring
	Format       whereHelperstring
	Width        whereHelperint
	Height       whereHelperint
	Type         whereHelperint8
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperuint{field: "`home_publish_msg_picture`.`id`"},
	OwnerID:      whereHelperstring{field: "`home_publish_msg_picture`.`owner_id`"},
	ThumbnailUrl: whereHelperstring{field: "`home_publish_msg_picture`.`thumbnailUrl`"},
	MiddlePicUrl: whereHelperstring{field: "`home_publish_msg_picture`.`middlePicUrl`"},
	PicUrl:       whereHelperstring{field: "`home_publish_msg_picture`.`picUrl`"},
	Format:       whereHelperstring{field: "`home_publish_msg_picture`.`format`"},
	Width:        whereHelperint{field: "`home_publish_msg_picture`.`width`"},
	Height:       whereHelperint{field: "`home_publish_msg_picture`.`height`"},
	Type:         whereHelperint8{field: "`home_publish_msg_picture`.`type`"},
	CreatedAt:    whereHelpertime_Time{field: "`home_publish_msg_picture`.`createdAt`"},
}

// HomePictureRels is where relationship names are stored.
var HomePictureRels = struct {
}{}

// homePictureR is where relationships are stored.
type homePictureR struct {
}

// NewStruct creates a new relationship struct
func (*homePictureR) NewStruct() *homePictureR {
	return &homePictureR{}
}

// homePictureL is where Load methods for each relationship are stored.
type homePictureL struct{}

var (
	homePictureAllColumns            = []string{"id", "owner_id", "thumbnailUrl", "middlePicUrl", "picUrl", "format", "width", "height", "type", "createdAt"}
	homePictureColumnsWithoutDefault = []string{"owner_id", "thumbnailUrl", "middlePicUrl", "picUrl", "format"}
	homePictureColumnsWithDefault    = []string{"id", "width", "height", "type", "createdAt"}
	homePicturePrimaryKeyColumns     = []string{"id"}
)

type (
	// HomePictureSlice is an alias for a slice of pointers to HomePicture.
	// This should generally be used opposed to []HomePicture.
	HomePictureSlice []*HomePicture
	// HomePictureHook is the signature for custom HomePicture hook methods
	HomePictureHook func(context.Context, boil.ContextExecutor, *HomePicture) error

	homePictureQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	homePictureType                 = reflect.TypeOf(&HomePicture{})
	homePictureMapping              = queries.MakeStructMapping(homePictureType)
	homePicturePrimaryKeyMapping, _ = queries.BindMapping(homePictureType, homePictureMapping, homePicturePrimaryKeyColumns)
	homePictureInsertCacheMut       sync.RWMutex
	homePictureInsertCache          = make(map[string]insertCache)
	homePictureUpdateCacheMut       sync.RWMutex
	homePictureUpdateCache          = make(map[string]updateCache)
	homePictureUpsertCacheMut       sync.RWMutex
	homePictureUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var homePictureBeforeInsertHooks []HomePictureHook
var homePictureBeforeUpdateHooks []HomePictureHook
var homePictureBeforeDeleteHooks []HomePictureHook
var homePictureBeforeUpsertHooks []HomePictureHook

var homePictureAfterInsertHooks []HomePictureHook
var homePictureAfterSelectHooks []HomePictureHook
var homePictureAfterUpdateHooks []HomePictureHook
var homePictureAfterDeleteHooks []HomePictureHook
var homePictureAfterUpsertHooks []HomePictureHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HomePicture) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homePictureBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HomePicture) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homePictureBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HomePicture) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homePictureBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HomePicture) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homePictureBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HomePicture) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homePictureAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HomePicture) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homePictureAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HomePicture) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homePictureAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HomePicture) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homePictureAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HomePicture) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homePictureAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHomePictureHook registers your hook function for all future operations.
func AddHomePictureHook(hookPoint boil.HookPoint, homePictureHook HomePictureHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		homePictureBeforeInsertHooks = append(homePictureBeforeInsertHooks, homePictureHook)
	case boil.BeforeUpdateHook:
		homePictureBeforeUpdateHooks = append(homePictureBeforeUpdateHooks, homePictureHook)
	case boil.BeforeDeleteHook:
		homePictureBeforeDeleteHooks = append(homePictureBeforeDeleteHooks, homePictureHook)
	case boil.BeforeUpsertHook:
		homePictureBeforeUpsertHooks = append(homePictureBeforeUpsertHooks, homePictureHook)
	case boil.AfterInsertHook:
		homePictureAfterInsertHooks = append(homePictureAfterInsertHooks, homePictureHook)
	case boil.AfterSelectHook:
		homePictureAfterSelectHooks = append(homePictureAfterSelectHooks, homePictureHook)
	case boil.AfterUpdateHook:
		homePictureAfterUpdateHooks = append(homePictureAfterUpdateHooks, homePictureHook)
	case boil.AfterDeleteHook:
		homePictureAfterDeleteHooks = append(homePictureAfterDeleteHooks, homePictureHook)
	case boil.AfterUpsertHook:
		homePictureAfterUpsertHooks = append(homePictureAfterUpsertHooks, homePictureHook)
	}
}

// One returns a single homePicture record from the query.
func (q homePictureQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HomePicture, error) {
	o := &HomePicture{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "home: failed to execute a one query for home_publish_msg_picture")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HomePicture records from the query.
func (q homePictureQuery) All(ctx context.Context, exec boil.ContextExecutor) (HomePictureSlice, error) {
	var o []*HomePicture

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "home: failed to assign all query results to HomePicture slice")
	}

	if len(homePictureAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HomePicture records in the query.
func (q homePictureQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to count home_publish_msg_picture rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q homePictureQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "home: failed to check if home_publish_msg_picture exists")
	}

	return count > 0, nil
}

// HomePictures retrieves all the records using an executor.
func HomePictures(mods ...qm.QueryMod) homePictureQuery {
	mods = append(mods, qm.From("`home_publish_msg_picture`"))
	return homePictureQuery{NewQuery(mods...)}
}

// FindHomePicture retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHomePicture(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*HomePicture, error) {
	homePictureObj := &HomePicture{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `home_publish_msg_picture` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, homePictureObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "home: unable to select from home_publish_msg_picture")
	}

	return homePictureObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HomePicture) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("home: no home_publish_msg_picture provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(homePictureColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	homePictureInsertCacheMut.RLock()
	cache, cached := homePictureInsertCache[key]
	homePictureInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			homePictureAllColumns,
			homePictureColumnsWithDefault,
			homePictureColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(homePictureType, homePictureMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(homePictureType, homePictureMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `home_publish_msg_picture` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `home_publish_msg_picture` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `home_publish_msg_picture` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, homePicturePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "home: unable to insert into home_publish_msg_picture")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == homePictureMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "home: unable to populate default values for home_publish_msg_picture")
	}

CacheNoHooks:
	if !cached {
		homePictureInsertCacheMut.Lock()
		homePictureInsertCache[key] = cache
		homePictureInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HomePicture.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HomePicture) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	homePictureUpdateCacheMut.RLock()
	cache, cached := homePictureUpdateCache[key]
	homePictureUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			homePictureAllColumns,
			homePicturePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("home: unable to update home_publish_msg_picture, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `home_publish_msg_picture` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, homePicturePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(homePictureType, homePictureMapping, append(wl, homePicturePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update home_publish_msg_picture row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by update for home_publish_msg_picture")
	}

	if !cached {
		homePictureUpdateCacheMut.Lock()
		homePictureUpdateCache[key] = cache
		homePictureUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q homePictureQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update all for home_publish_msg_picture")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to retrieve rows affected for home_publish_msg_picture")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HomePictureSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("home: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homePicturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `home_publish_msg_picture` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homePicturePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update all in homePicture slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to retrieve rows affected all in update all homePicture")
	}
	return rowsAff, nil
}

var mySQLHomePictureUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HomePicture) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("home: no home_publish_msg_picture provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(homePictureColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLHomePictureUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	homePictureUpsertCacheMut.RLock()
	cache, cached := homePictureUpsertCache[key]
	homePictureUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			homePictureAllColumns,
			homePictureColumnsWithDefault,
			homePictureColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			homePictureAllColumns,
			homePicturePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("home: unable to upsert home_publish_msg_picture, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "home_publish_msg_picture", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `home_publish_msg_picture` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(homePictureType, homePictureMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(homePictureType, homePictureMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "home: unable to upsert for home_publish_msg_picture")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == homePictureMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(homePictureType, homePictureMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "home: unable to retrieve unique values for home_publish_msg_picture")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "home: unable to populate default values for home_publish_msg_picture")
	}

CacheNoHooks:
	if !cached {
		homePictureUpsertCacheMut.Lock()
		homePictureUpsertCache[key] = cache
		homePictureUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HomePicture record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HomePicture) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("home: no HomePicture provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), homePicturePrimaryKeyMapping)
	sql := "DELETE FROM `home_publish_msg_picture` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete from home_publish_msg_picture")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by delete for home_publish_msg_picture")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q homePictureQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("home: no homePictureQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete all from home_publish_msg_picture")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by deleteall for home_publish_msg_picture")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HomePictureSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(homePictureBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homePicturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `home_publish_msg_picture` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homePicturePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete all from homePicture slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by deleteall for home_publish_msg_picture")
	}

	if len(homePictureAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HomePicture) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHomePicture(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HomePictureSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HomePictureSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homePicturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `home_publish_msg_picture`.* FROM `home_publish_msg_picture` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homePicturePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "home: unable to reload all in HomePictureSlice")
	}

	*o = slice

	return nil
}

// HomePictureExists checks if the HomePicture row exists.
func HomePictureExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `home_publish_msg_picture` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "home: unable to check if home_publish_msg_picture exists")
	}

	return exists, nil
}
