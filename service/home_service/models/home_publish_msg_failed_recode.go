// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package home

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// HomeFailedRecode is an object representing the database table.
type HomeFailedRecode struct {
	ID              uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID             string      `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Content         string      `boil:"content" json:"content" toml:"content" yaml:"content"`
	ResourceURLList string      `boil:"resource_url_list" json:"resource_url_list" toml:"resource_url_list" yaml:"resource_url_list"`
	MSGType         int8        `boil:"msg_type" json:"msg_type" toml:"msg_type" yaml:"msg_type"`
	Tag             int8        `boil:"tag" json:"tag" toml:"tag" yaml:"tag"`
	IsTop           int8        `boil:"is_top" json:"is_top" toml:"is_top" yaml:"is_top"`
	Status          int8        `boil:"status" json:"status" toml:"status" yaml:"status"`
	Deleted         int8        `boil:"deleted" json:"deleted" toml:"deleted" yaml:"deleted"`
	Created         time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`
	CreatedUser     null.String `boil:"created_user" json:"created_user" toml:"created_user" yaml:"created_user"`
	Modified        time.Time   `boil:"modified" json:"modified" toml:"modified" yaml:"modified"`

	R *homeFailedRecodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L homeFailedRecodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HomeFailedRecodeColumns = struct {
	ID              string
	UID             string
	Content         string
	ResourceURLList string
	MSGType         string
	Tag             string
	IsTop           string
	Status          string
	Deleted         string
	Created         string
	CreatedUser     string
	Modified        string
}{
	ID:              "id",
	UID:             "uid",
	Content:         "content",
	ResourceURLList: "resource_url_list",
	MSGType:         "msg_type",
	Tag:             "tag",
	IsTop:           "is_top",
	Status:          "status",
	Deleted:         "deleted",
	Created:         "created",
	CreatedUser:     "created_user",
	Modified:        "modified",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var HomeFailedRecodeWhere = struct {
	ID              whereHelperuint
	UID             whereHelperstring
	Content         whereHelperstring
	ResourceURLList whereHelperstring
	MSGType         whereHelperint8
	Tag             whereHelperint8
	IsTop           whereHelperint8
	Status          whereHelperint8
	Deleted         whereHelperint8
	Created         whereHelpertime_Time
	CreatedUser     whereHelpernull_String
	Modified        whereHelpertime_Time
}{
	ID:              whereHelperuint{field: "`home_publish_msg_failed_recode`.`id`"},
	UID:             whereHelperstring{field: "`home_publish_msg_failed_recode`.`uid`"},
	Content:         whereHelperstring{field: "`home_publish_msg_failed_recode`.`content`"},
	ResourceURLList: whereHelperstring{field: "`home_publish_msg_failed_recode`.`resource_url_list`"},
	MSGType:         whereHelperint8{field: "`home_publish_msg_failed_recode`.`msg_type`"},
	Tag:             whereHelperint8{field: "`home_publish_msg_failed_recode`.`tag`"},
	IsTop:           whereHelperint8{field: "`home_publish_msg_failed_recode`.`is_top`"},
	Status:          whereHelperint8{field: "`home_publish_msg_failed_recode`.`status`"},
	Deleted:         whereHelperint8{field: "`home_publish_msg_failed_recode`.`deleted`"},
	Created:         whereHelpertime_Time{field: "`home_publish_msg_failed_recode`.`created`"},
	CreatedUser:     whereHelpernull_String{field: "`home_publish_msg_failed_recode`.`created_user`"},
	Modified:        whereHelpertime_Time{field: "`home_publish_msg_failed_recode`.`modified`"},
}

// HomeFailedRecodeRels is where relationship names are stored.
var HomeFailedRecodeRels = struct {
}{}

// homeFailedRecodeR is where relationships are stored.
type homeFailedRecodeR struct {
}

// NewStruct creates a new relationship struct
func (*homeFailedRecodeR) NewStruct() *homeFailedRecodeR {
	return &homeFailedRecodeR{}
}

// homeFailedRecodeL is where Load methods for each relationship are stored.
type homeFailedRecodeL struct{}

var (
	homeFailedRecodeAllColumns            = []string{"id", "uid", "content", "resource_url_list", "msg_type", "tag", "is_top", "status", "deleted", "created", "created_user", "modified"}
	homeFailedRecodeColumnsWithoutDefault = []string{"uid", "content", "resource_url_list", "created_user"}
	homeFailedRecodeColumnsWithDefault    = []string{"id", "msg_type", "tag", "is_top", "status", "deleted", "created", "modified"}
	homeFailedRecodePrimaryKeyColumns     = []string{"id"}
)

type (
	// HomeFailedRecodeSlice is an alias for a slice of pointers to HomeFailedRecode.
	// This should generally be used opposed to []HomeFailedRecode.
	HomeFailedRecodeSlice []*HomeFailedRecode
	// HomeFailedRecodeHook is the signature for custom HomeFailedRecode hook methods
	HomeFailedRecodeHook func(context.Context, boil.ContextExecutor, *HomeFailedRecode) error

	homeFailedRecodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	homeFailedRecodeType                 = reflect.TypeOf(&HomeFailedRecode{})
	homeFailedRecodeMapping              = queries.MakeStructMapping(homeFailedRecodeType)
	homeFailedRecodePrimaryKeyMapping, _ = queries.BindMapping(homeFailedRecodeType, homeFailedRecodeMapping, homeFailedRecodePrimaryKeyColumns)
	homeFailedRecodeInsertCacheMut       sync.RWMutex
	homeFailedRecodeInsertCache          = make(map[string]insertCache)
	homeFailedRecodeUpdateCacheMut       sync.RWMutex
	homeFailedRecodeUpdateCache          = make(map[string]updateCache)
	homeFailedRecodeUpsertCacheMut       sync.RWMutex
	homeFailedRecodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var homeFailedRecodeBeforeInsertHooks []HomeFailedRecodeHook
var homeFailedRecodeBeforeUpdateHooks []HomeFailedRecodeHook
var homeFailedRecodeBeforeDeleteHooks []HomeFailedRecodeHook
var homeFailedRecodeBeforeUpsertHooks []HomeFailedRecodeHook

var homeFailedRecodeAfterInsertHooks []HomeFailedRecodeHook
var homeFailedRecodeAfterSelectHooks []HomeFailedRecodeHook
var homeFailedRecodeAfterUpdateHooks []HomeFailedRecodeHook
var homeFailedRecodeAfterDeleteHooks []HomeFailedRecodeHook
var homeFailedRecodeAfterUpsertHooks []HomeFailedRecodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HomeFailedRecode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeFailedRecodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HomeFailedRecode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeFailedRecodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HomeFailedRecode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeFailedRecodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HomeFailedRecode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeFailedRecodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HomeFailedRecode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeFailedRecodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HomeFailedRecode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeFailedRecodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HomeFailedRecode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeFailedRecodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HomeFailedRecode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeFailedRecodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HomeFailedRecode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeFailedRecodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHomeFailedRecodeHook registers your hook function for all future operations.
func AddHomeFailedRecodeHook(hookPoint boil.HookPoint, homeFailedRecodeHook HomeFailedRecodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		homeFailedRecodeBeforeInsertHooks = append(homeFailedRecodeBeforeInsertHooks, homeFailedRecodeHook)
	case boil.BeforeUpdateHook:
		homeFailedRecodeBeforeUpdateHooks = append(homeFailedRecodeBeforeUpdateHooks, homeFailedRecodeHook)
	case boil.BeforeDeleteHook:
		homeFailedRecodeBeforeDeleteHooks = append(homeFailedRecodeBeforeDeleteHooks, homeFailedRecodeHook)
	case boil.BeforeUpsertHook:
		homeFailedRecodeBeforeUpsertHooks = append(homeFailedRecodeBeforeUpsertHooks, homeFailedRecodeHook)
	case boil.AfterInsertHook:
		homeFailedRecodeAfterInsertHooks = append(homeFailedRecodeAfterInsertHooks, homeFailedRecodeHook)
	case boil.AfterSelectHook:
		homeFailedRecodeAfterSelectHooks = append(homeFailedRecodeAfterSelectHooks, homeFailedRecodeHook)
	case boil.AfterUpdateHook:
		homeFailedRecodeAfterUpdateHooks = append(homeFailedRecodeAfterUpdateHooks, homeFailedRecodeHook)
	case boil.AfterDeleteHook:
		homeFailedRecodeAfterDeleteHooks = append(homeFailedRecodeAfterDeleteHooks, homeFailedRecodeHook)
	case boil.AfterUpsertHook:
		homeFailedRecodeAfterUpsertHooks = append(homeFailedRecodeAfterUpsertHooks, homeFailedRecodeHook)
	}
}

// One returns a single homeFailedRecode record from the query.
func (q homeFailedRecodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HomeFailedRecode, error) {
	o := &HomeFailedRecode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "home: failed to execute a one query for home_publish_msg_failed_recode")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HomeFailedRecode records from the query.
func (q homeFailedRecodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (HomeFailedRecodeSlice, error) {
	var o []*HomeFailedRecode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "home: failed to assign all query results to HomeFailedRecode slice")
	}

	if len(homeFailedRecodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HomeFailedRecode records in the query.
func (q homeFailedRecodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to count home_publish_msg_failed_recode rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q homeFailedRecodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "home: failed to check if home_publish_msg_failed_recode exists")
	}

	return count > 0, nil
}

// HomeFailedRecodes retrieves all the records using an executor.
func HomeFailedRecodes(mods ...qm.QueryMod) homeFailedRecodeQuery {
	mods = append(mods, qm.From("`home_publish_msg_failed_recode`"))
	return homeFailedRecodeQuery{NewQuery(mods...)}
}

// FindHomeFailedRecode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHomeFailedRecode(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*HomeFailedRecode, error) {
	homeFailedRecodeObj := &HomeFailedRecode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `home_publish_msg_failed_recode` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, homeFailedRecodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "home: unable to select from home_publish_msg_failed_recode")
	}

	return homeFailedRecodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HomeFailedRecode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("home: no home_publish_msg_failed_recode provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(homeFailedRecodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	homeFailedRecodeInsertCacheMut.RLock()
	cache, cached := homeFailedRecodeInsertCache[key]
	homeFailedRecodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			homeFailedRecodeAllColumns,
			homeFailedRecodeColumnsWithDefault,
			homeFailedRecodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(homeFailedRecodeType, homeFailedRecodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(homeFailedRecodeType, homeFailedRecodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `home_publish_msg_failed_recode` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `home_publish_msg_failed_recode` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `home_publish_msg_failed_recode` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, homeFailedRecodePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "home: unable to insert into home_publish_msg_failed_recode")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == homeFailedRecodeMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "home: unable to populate default values for home_publish_msg_failed_recode")
	}

CacheNoHooks:
	if !cached {
		homeFailedRecodeInsertCacheMut.Lock()
		homeFailedRecodeInsertCache[key] = cache
		homeFailedRecodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HomeFailedRecode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HomeFailedRecode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	homeFailedRecodeUpdateCacheMut.RLock()
	cache, cached := homeFailedRecodeUpdateCache[key]
	homeFailedRecodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			homeFailedRecodeAllColumns,
			homeFailedRecodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("home: unable to update home_publish_msg_failed_recode, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `home_publish_msg_failed_recode` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, homeFailedRecodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(homeFailedRecodeType, homeFailedRecodeMapping, append(wl, homeFailedRecodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update home_publish_msg_failed_recode row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by update for home_publish_msg_failed_recode")
	}

	if !cached {
		homeFailedRecodeUpdateCacheMut.Lock()
		homeFailedRecodeUpdateCache[key] = cache
		homeFailedRecodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q homeFailedRecodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update all for home_publish_msg_failed_recode")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to retrieve rows affected for home_publish_msg_failed_recode")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HomeFailedRecodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("home: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeFailedRecodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `home_publish_msg_failed_recode` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homeFailedRecodePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update all in homeFailedRecode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to retrieve rows affected all in update all homeFailedRecode")
	}
	return rowsAff, nil
}

var mySQLHomeFailedRecodeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HomeFailedRecode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("home: no home_publish_msg_failed_recode provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(homeFailedRecodeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLHomeFailedRecodeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	homeFailedRecodeUpsertCacheMut.RLock()
	cache, cached := homeFailedRecodeUpsertCache[key]
	homeFailedRecodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			homeFailedRecodeAllColumns,
			homeFailedRecodeColumnsWithDefault,
			homeFailedRecodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			homeFailedRecodeAllColumns,
			homeFailedRecodePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("home: unable to upsert home_publish_msg_failed_recode, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "home_publish_msg_failed_recode", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `home_publish_msg_failed_recode` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(homeFailedRecodeType, homeFailedRecodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(homeFailedRecodeType, homeFailedRecodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "home: unable to upsert for home_publish_msg_failed_recode")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == homeFailedRecodeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(homeFailedRecodeType, homeFailedRecodeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "home: unable to retrieve unique values for home_publish_msg_failed_recode")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "home: unable to populate default values for home_publish_msg_failed_recode")
	}

CacheNoHooks:
	if !cached {
		homeFailedRecodeUpsertCacheMut.Lock()
		homeFailedRecodeUpsertCache[key] = cache
		homeFailedRecodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HomeFailedRecode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HomeFailedRecode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("home: no HomeFailedRecode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), homeFailedRecodePrimaryKeyMapping)
	sql := "DELETE FROM `home_publish_msg_failed_recode` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete from home_publish_msg_failed_recode")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by delete for home_publish_msg_failed_recode")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q homeFailedRecodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("home: no homeFailedRecodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete all from home_publish_msg_failed_recode")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by deleteall for home_publish_msg_failed_recode")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HomeFailedRecodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(homeFailedRecodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeFailedRecodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `home_publish_msg_failed_recode` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homeFailedRecodePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete all from homeFailedRecode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by deleteall for home_publish_msg_failed_recode")
	}

	if len(homeFailedRecodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HomeFailedRecode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHomeFailedRecode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HomeFailedRecodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HomeFailedRecodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeFailedRecodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `home_publish_msg_failed_recode`.* FROM `home_publish_msg_failed_recode` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homeFailedRecodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "home: unable to reload all in HomeFailedRecodeSlice")
	}

	*o = slice

	return nil
}

// HomeFailedRecodeExists checks if the HomeFailedRecode row exists.
func HomeFailedRecodeExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `home_publish_msg_failed_recode` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "home: unable to check if home_publish_msg_failed_recode exists")
	}

	return exists, nil
}
