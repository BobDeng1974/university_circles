// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package home

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// HomeComment is an object representing the database table.
type HomeComment struct {
	ID               uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID              string    `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	CommID           string    `boil:"comm_id" json:"comm_id" toml:"comm_id" yaml:"comm_id"`
	Type             string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	TargetType       string    `boil:"targetType" json:"targetType" toml:"targetType" yaml:"targetType"`
	TargetId         string    `boil:"targetId" json:"targetId" toml:"targetId" yaml:"targetId"`
	Level            int8      `boil:"level" json:"level" toml:"level" yaml:"level"`
	Content          string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	LikeCount        int       `boil:"likeCount" json:"likeCount" toml:"likeCount" yaml:"likeCount"`
	ReplyCount       int       `boil:"replyCount" json:"replyCount" toml:"replyCount" yaml:"replyCount"`
	ReplyToCommentId string    `boil:"replyToCommentId" json:"replyToCommentId" toml:"replyToCommentId" yaml:"replyToCommentId"`
	Report           int8      `boil:"report" json:"report" toml:"report" yaml:"report"`
	Status           string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	Deleted          int8      `boil:"deleted" json:"deleted" toml:"deleted" yaml:"deleted"`
	CreatedAt        time.Time `boil:"createdAt" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *homeCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L homeCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HomeCommentColumns = struct {
	ID               string
	UID              string
	CommID           string
	Type             string
	TargetType       string
	TargetId         string
	Level            string
	Content          string
	LikeCount        string
	ReplyCount       string
	ReplyToCommentId string
	Report           string
	Status           string
	Deleted          string
	CreatedAt        string
}{
	ID:               "id",
	UID:              "uid",
	CommID:           "comm_id",
	Type:             "type",
	TargetType:       "targetType",
	TargetId:         "targetId",
	Level:            "level",
	Content:          "content",
	LikeCount:        "likeCount",
	ReplyCount:       "replyCount",
	ReplyToCommentId: "replyToCommentId",
	Report:           "report",
	Status:           "status",
	Deleted:          "deleted",
	CreatedAt:        "createdAt",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var HomeCommentWhere = struct {
	ID               whereHelperuint
	UID              whereHelperstring
	CommID           whereHelperstring
	Type             whereHelperstring
	TargetType       whereHelperstring
	TargetId         whereHelperstring
	Level            whereHelperint8
	Content          whereHelperstring
	LikeCount        whereHelperint
	ReplyCount       whereHelperint
	ReplyToCommentId whereHelperstring
	Report           whereHelperint8
	Status           whereHelperstring
	Deleted          whereHelperint8
	CreatedAt        whereHelpertime_Time
}{
	ID:               whereHelperuint{field: "`home_publish_msg_comment`.`id`"},
	UID:              whereHelperstring{field: "`home_publish_msg_comment`.`uid`"},
	CommID:           whereHelperstring{field: "`home_publish_msg_comment`.`comm_id`"},
	Type:             whereHelperstring{field: "`home_publish_msg_comment`.`type`"},
	TargetType:       whereHelperstring{field: "`home_publish_msg_comment`.`targetType`"},
	TargetId:         whereHelperstring{field: "`home_publish_msg_comment`.`targetId`"},
	Level:            whereHelperint8{field: "`home_publish_msg_comment`.`level`"},
	Content:          whereHelperstring{field: "`home_publish_msg_comment`.`content`"},
	LikeCount:        whereHelperint{field: "`home_publish_msg_comment`.`likeCount`"},
	ReplyCount:       whereHelperint{field: "`home_publish_msg_comment`.`replyCount`"},
	ReplyToCommentId: whereHelperstring{field: "`home_publish_msg_comment`.`replyToCommentId`"},
	Report:           whereHelperint8{field: "`home_publish_msg_comment`.`report`"},
	Status:           whereHelperstring{field: "`home_publish_msg_comment`.`status`"},
	Deleted:          whereHelperint8{field: "`home_publish_msg_comment`.`deleted`"},
	CreatedAt:        whereHelpertime_Time{field: "`home_publish_msg_comment`.`createdAt`"},
}

// HomeCommentRels is where relationship names are stored.
var HomeCommentRels = struct {
}{}

// homeCommentR is where relationships are stored.
type homeCommentR struct {
}

// NewStruct creates a new relationship struct
func (*homeCommentR) NewStruct() *homeCommentR {
	return &homeCommentR{}
}

// homeCommentL is where Load methods for each relationship are stored.
type homeCommentL struct{}

var (
	homeCommentAllColumns            = []string{"id", "uid", "comm_id", "type", "targetType", "targetId", "level", "content", "likeCount", "replyCount", "replyToCommentId", "report", "status", "deleted", "createdAt"}
	homeCommentColumnsWithoutDefault = []string{"uid", "comm_id", "type", "targetType", "targetId", "content", "replyToCommentId"}
	homeCommentColumnsWithDefault    = []string{"id", "level", "likeCount", "replyCount", "report", "status", "deleted", "createdAt"}
	homeCommentPrimaryKeyColumns     = []string{"id"}
)

type (
	// HomeCommentSlice is an alias for a slice of pointers to HomeComment.
	// This should generally be used opposed to []HomeComment.
	HomeCommentSlice []*HomeComment
	// HomeCommentHook is the signature for custom HomeComment hook methods
	HomeCommentHook func(context.Context, boil.ContextExecutor, *HomeComment) error

	homeCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	homeCommentType                 = reflect.TypeOf(&HomeComment{})
	homeCommentMapping              = queries.MakeStructMapping(homeCommentType)
	homeCommentPrimaryKeyMapping, _ = queries.BindMapping(homeCommentType, homeCommentMapping, homeCommentPrimaryKeyColumns)
	homeCommentInsertCacheMut       sync.RWMutex
	homeCommentInsertCache          = make(map[string]insertCache)
	homeCommentUpdateCacheMut       sync.RWMutex
	homeCommentUpdateCache          = make(map[string]updateCache)
	homeCommentUpsertCacheMut       sync.RWMutex
	homeCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var homeCommentBeforeInsertHooks []HomeCommentHook
var homeCommentBeforeUpdateHooks []HomeCommentHook
var homeCommentBeforeDeleteHooks []HomeCommentHook
var homeCommentBeforeUpsertHooks []HomeCommentHook

var homeCommentAfterInsertHooks []HomeCommentHook
var homeCommentAfterSelectHooks []HomeCommentHook
var homeCommentAfterUpdateHooks []HomeCommentHook
var homeCommentAfterDeleteHooks []HomeCommentHook
var homeCommentAfterUpsertHooks []HomeCommentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HomeComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HomeComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HomeComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HomeComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HomeComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HomeComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HomeComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HomeComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HomeComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHomeCommentHook registers your hook function for all future operations.
func AddHomeCommentHook(hookPoint boil.HookPoint, homeCommentHook HomeCommentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		homeCommentBeforeInsertHooks = append(homeCommentBeforeInsertHooks, homeCommentHook)
	case boil.BeforeUpdateHook:
		homeCommentBeforeUpdateHooks = append(homeCommentBeforeUpdateHooks, homeCommentHook)
	case boil.BeforeDeleteHook:
		homeCommentBeforeDeleteHooks = append(homeCommentBeforeDeleteHooks, homeCommentHook)
	case boil.BeforeUpsertHook:
		homeCommentBeforeUpsertHooks = append(homeCommentBeforeUpsertHooks, homeCommentHook)
	case boil.AfterInsertHook:
		homeCommentAfterInsertHooks = append(homeCommentAfterInsertHooks, homeCommentHook)
	case boil.AfterSelectHook:
		homeCommentAfterSelectHooks = append(homeCommentAfterSelectHooks, homeCommentHook)
	case boil.AfterUpdateHook:
		homeCommentAfterUpdateHooks = append(homeCommentAfterUpdateHooks, homeCommentHook)
	case boil.AfterDeleteHook:
		homeCommentAfterDeleteHooks = append(homeCommentAfterDeleteHooks, homeCommentHook)
	case boil.AfterUpsertHook:
		homeCommentAfterUpsertHooks = append(homeCommentAfterUpsertHooks, homeCommentHook)
	}
}

// One returns a single homeComment record from the query.
func (q homeCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HomeComment, error) {
	o := &HomeComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "home: failed to execute a one query for home_publish_msg_comment")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HomeComment records from the query.
func (q homeCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (HomeCommentSlice, error) {
	var o []*HomeComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "home: failed to assign all query results to HomeComment slice")
	}

	if len(homeCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HomeComment records in the query.
func (q homeCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to count home_publish_msg_comment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q homeCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "home: failed to check if home_publish_msg_comment exists")
	}

	return count > 0, nil
}

// HomeComments retrieves all the records using an executor.
func HomeComments(mods ...qm.QueryMod) homeCommentQuery {
	mods = append(mods, qm.From("`home_publish_msg_comment`"))
	return homeCommentQuery{NewQuery(mods...)}
}

// FindHomeComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHomeComment(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*HomeComment, error) {
	homeCommentObj := &HomeComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `home_publish_msg_comment` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, homeCommentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "home: unable to select from home_publish_msg_comment")
	}

	return homeCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HomeComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("home: no home_publish_msg_comment provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(homeCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	homeCommentInsertCacheMut.RLock()
	cache, cached := homeCommentInsertCache[key]
	homeCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			homeCommentAllColumns,
			homeCommentColumnsWithDefault,
			homeCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(homeCommentType, homeCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(homeCommentType, homeCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `home_publish_msg_comment` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `home_publish_msg_comment` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `home_publish_msg_comment` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, homeCommentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "home: unable to insert into home_publish_msg_comment")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == homeCommentMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "home: unable to populate default values for home_publish_msg_comment")
	}

CacheNoHooks:
	if !cached {
		homeCommentInsertCacheMut.Lock()
		homeCommentInsertCache[key] = cache
		homeCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HomeComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HomeComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	homeCommentUpdateCacheMut.RLock()
	cache, cached := homeCommentUpdateCache[key]
	homeCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			homeCommentAllColumns,
			homeCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("home: unable to update home_publish_msg_comment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `home_publish_msg_comment` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, homeCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(homeCommentType, homeCommentMapping, append(wl, homeCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update home_publish_msg_comment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by update for home_publish_msg_comment")
	}

	if !cached {
		homeCommentUpdateCacheMut.Lock()
		homeCommentUpdateCache[key] = cache
		homeCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q homeCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update all for home_publish_msg_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to retrieve rows affected for home_publish_msg_comment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HomeCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("home: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `home_publish_msg_comment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homeCommentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update all in homeComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to retrieve rows affected all in update all homeComment")
	}
	return rowsAff, nil
}

var mySQLHomeCommentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HomeComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("home: no home_publish_msg_comment provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(homeCommentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLHomeCommentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	homeCommentUpsertCacheMut.RLock()
	cache, cached := homeCommentUpsertCache[key]
	homeCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			homeCommentAllColumns,
			homeCommentColumnsWithDefault,
			homeCommentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			homeCommentAllColumns,
			homeCommentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("home: unable to upsert home_publish_msg_comment, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "home_publish_msg_comment", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `home_publish_msg_comment` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(homeCommentType, homeCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(homeCommentType, homeCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "home: unable to upsert for home_publish_msg_comment")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == homeCommentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(homeCommentType, homeCommentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "home: unable to retrieve unique values for home_publish_msg_comment")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "home: unable to populate default values for home_publish_msg_comment")
	}

CacheNoHooks:
	if !cached {
		homeCommentUpsertCacheMut.Lock()
		homeCommentUpsertCache[key] = cache
		homeCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HomeComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HomeComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("home: no HomeComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), homeCommentPrimaryKeyMapping)
	sql := "DELETE FROM `home_publish_msg_comment` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete from home_publish_msg_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by delete for home_publish_msg_comment")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q homeCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("home: no homeCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete all from home_publish_msg_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by deleteall for home_publish_msg_comment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HomeCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(homeCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `home_publish_msg_comment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homeCommentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete all from homeComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by deleteall for home_publish_msg_comment")
	}

	if len(homeCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HomeComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHomeComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HomeCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HomeCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `home_publish_msg_comment`.* FROM `home_publish_msg_comment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homeCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "home: unable to reload all in HomeCommentSlice")
	}

	*o = slice

	return nil
}

// HomeCommentExists checks if the HomeComment row exists.
func HomeCommentExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `home_publish_msg_comment` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "home: unable to check if home_publish_msg_comment exists")
	}

	return exists, nil
}
