// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package home

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// HomeCommentUrlsInText is an object representing the database table.
type HomeCommentUrlsInText struct {
	ID          uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID     string    `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	Title       string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	OriginalUrl string    `boil:"originalUrl" json:"originalUrl" toml:"originalUrl" yaml:"originalUrl"`
	URL         string    `boil:"url" json:"url" toml:"url" yaml:"url"`
	CreatedAt   time.Time `boil:"createdAt" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *homeCommentUrlsInTextR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L homeCommentUrlsInTextL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HomeCommentUrlsInTextColumns = struct {
	ID          string
	OwnerID     string
	Title       string
	OriginalUrl string
	URL         string
	CreatedAt   string
}{
	ID:          "id",
	OwnerID:     "owner_id",
	Title:       "title",
	OriginalUrl: "originalUrl",
	URL:         "url",
	CreatedAt:   "createdAt",
}

// Generated where

var HomeCommentUrlsInTextWhere = struct {
	ID          whereHelperuint
	OwnerID     whereHelperstring
	Title       whereHelperstring
	OriginalUrl whereHelperstring
	URL         whereHelperstring
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperuint{field: "`home_publish_msg_comment_urls_in_text`.`id`"},
	OwnerID:     whereHelperstring{field: "`home_publish_msg_comment_urls_in_text`.`owner_id`"},
	Title:       whereHelperstring{field: "`home_publish_msg_comment_urls_in_text`.`title`"},
	OriginalUrl: whereHelperstring{field: "`home_publish_msg_comment_urls_in_text`.`originalUrl`"},
	URL:         whereHelperstring{field: "`home_publish_msg_comment_urls_in_text`.`url`"},
	CreatedAt:   whereHelpertime_Time{field: "`home_publish_msg_comment_urls_in_text`.`createdAt`"},
}

// HomeCommentUrlsInTextRels is where relationship names are stored.
var HomeCommentUrlsInTextRels = struct {
}{}

// homeCommentUrlsInTextR is where relationships are stored.
type homeCommentUrlsInTextR struct {
}

// NewStruct creates a new relationship struct
func (*homeCommentUrlsInTextR) NewStruct() *homeCommentUrlsInTextR {
	return &homeCommentUrlsInTextR{}
}

// homeCommentUrlsInTextL is where Load methods for each relationship are stored.
type homeCommentUrlsInTextL struct{}

var (
	homeCommentUrlsInTextAllColumns            = []string{"id", "owner_id", "title", "originalUrl", "url", "createdAt"}
	homeCommentUrlsInTextColumnsWithoutDefault = []string{"owner_id", "title", "originalUrl", "url"}
	homeCommentUrlsInTextColumnsWithDefault    = []string{"id", "createdAt"}
	homeCommentUrlsInTextPrimaryKeyColumns     = []string{"id"}
)

type (
	// HomeCommentUrlsInTextSlice is an alias for a slice of pointers to HomeCommentUrlsInText.
	// This should generally be used opposed to []HomeCommentUrlsInText.
	HomeCommentUrlsInTextSlice []*HomeCommentUrlsInText
	// HomeCommentUrlsInTextHook is the signature for custom HomeCommentUrlsInText hook methods
	HomeCommentUrlsInTextHook func(context.Context, boil.ContextExecutor, *HomeCommentUrlsInText) error

	homeCommentUrlsInTextQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	homeCommentUrlsInTextType                 = reflect.TypeOf(&HomeCommentUrlsInText{})
	homeCommentUrlsInTextMapping              = queries.MakeStructMapping(homeCommentUrlsInTextType)
	homeCommentUrlsInTextPrimaryKeyMapping, _ = queries.BindMapping(homeCommentUrlsInTextType, homeCommentUrlsInTextMapping, homeCommentUrlsInTextPrimaryKeyColumns)
	homeCommentUrlsInTextInsertCacheMut       sync.RWMutex
	homeCommentUrlsInTextInsertCache          = make(map[string]insertCache)
	homeCommentUrlsInTextUpdateCacheMut       sync.RWMutex
	homeCommentUrlsInTextUpdateCache          = make(map[string]updateCache)
	homeCommentUrlsInTextUpsertCacheMut       sync.RWMutex
	homeCommentUrlsInTextUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var homeCommentUrlsInTextBeforeInsertHooks []HomeCommentUrlsInTextHook
var homeCommentUrlsInTextBeforeUpdateHooks []HomeCommentUrlsInTextHook
var homeCommentUrlsInTextBeforeDeleteHooks []HomeCommentUrlsInTextHook
var homeCommentUrlsInTextBeforeUpsertHooks []HomeCommentUrlsInTextHook

var homeCommentUrlsInTextAfterInsertHooks []HomeCommentUrlsInTextHook
var homeCommentUrlsInTextAfterSelectHooks []HomeCommentUrlsInTextHook
var homeCommentUrlsInTextAfterUpdateHooks []HomeCommentUrlsInTextHook
var homeCommentUrlsInTextAfterDeleteHooks []HomeCommentUrlsInTextHook
var homeCommentUrlsInTextAfterUpsertHooks []HomeCommentUrlsInTextHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HomeCommentUrlsInText) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentUrlsInTextBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HomeCommentUrlsInText) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentUrlsInTextBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HomeCommentUrlsInText) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentUrlsInTextBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HomeCommentUrlsInText) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentUrlsInTextBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HomeCommentUrlsInText) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentUrlsInTextAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HomeCommentUrlsInText) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentUrlsInTextAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HomeCommentUrlsInText) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentUrlsInTextAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HomeCommentUrlsInText) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentUrlsInTextAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HomeCommentUrlsInText) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeCommentUrlsInTextAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHomeCommentUrlsInTextHook registers your hook function for all future operations.
func AddHomeCommentUrlsInTextHook(hookPoint boil.HookPoint, homeCommentUrlsInTextHook HomeCommentUrlsInTextHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		homeCommentUrlsInTextBeforeInsertHooks = append(homeCommentUrlsInTextBeforeInsertHooks, homeCommentUrlsInTextHook)
	case boil.BeforeUpdateHook:
		homeCommentUrlsInTextBeforeUpdateHooks = append(homeCommentUrlsInTextBeforeUpdateHooks, homeCommentUrlsInTextHook)
	case boil.BeforeDeleteHook:
		homeCommentUrlsInTextBeforeDeleteHooks = append(homeCommentUrlsInTextBeforeDeleteHooks, homeCommentUrlsInTextHook)
	case boil.BeforeUpsertHook:
		homeCommentUrlsInTextBeforeUpsertHooks = append(homeCommentUrlsInTextBeforeUpsertHooks, homeCommentUrlsInTextHook)
	case boil.AfterInsertHook:
		homeCommentUrlsInTextAfterInsertHooks = append(homeCommentUrlsInTextAfterInsertHooks, homeCommentUrlsInTextHook)
	case boil.AfterSelectHook:
		homeCommentUrlsInTextAfterSelectHooks = append(homeCommentUrlsInTextAfterSelectHooks, homeCommentUrlsInTextHook)
	case boil.AfterUpdateHook:
		homeCommentUrlsInTextAfterUpdateHooks = append(homeCommentUrlsInTextAfterUpdateHooks, homeCommentUrlsInTextHook)
	case boil.AfterDeleteHook:
		homeCommentUrlsInTextAfterDeleteHooks = append(homeCommentUrlsInTextAfterDeleteHooks, homeCommentUrlsInTextHook)
	case boil.AfterUpsertHook:
		homeCommentUrlsInTextAfterUpsertHooks = append(homeCommentUrlsInTextAfterUpsertHooks, homeCommentUrlsInTextHook)
	}
}

// One returns a single homeCommentUrlsInText record from the query.
func (q homeCommentUrlsInTextQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HomeCommentUrlsInText, error) {
	o := &HomeCommentUrlsInText{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "home: failed to execute a one query for home_publish_msg_comment_urls_in_text")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HomeCommentUrlsInText records from the query.
func (q homeCommentUrlsInTextQuery) All(ctx context.Context, exec boil.ContextExecutor) (HomeCommentUrlsInTextSlice, error) {
	var o []*HomeCommentUrlsInText

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "home: failed to assign all query results to HomeCommentUrlsInText slice")
	}

	if len(homeCommentUrlsInTextAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HomeCommentUrlsInText records in the query.
func (q homeCommentUrlsInTextQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to count home_publish_msg_comment_urls_in_text rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q homeCommentUrlsInTextQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "home: failed to check if home_publish_msg_comment_urls_in_text exists")
	}

	return count > 0, nil
}

// HomeCommentUrlsInTexts retrieves all the records using an executor.
func HomeCommentUrlsInTexts(mods ...qm.QueryMod) homeCommentUrlsInTextQuery {
	mods = append(mods, qm.From("`home_publish_msg_comment_urls_in_text`"))
	return homeCommentUrlsInTextQuery{NewQuery(mods...)}
}

// FindHomeCommentUrlsInText retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHomeCommentUrlsInText(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*HomeCommentUrlsInText, error) {
	homeCommentUrlsInTextObj := &HomeCommentUrlsInText{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `home_publish_msg_comment_urls_in_text` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, homeCommentUrlsInTextObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "home: unable to select from home_publish_msg_comment_urls_in_text")
	}

	return homeCommentUrlsInTextObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HomeCommentUrlsInText) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("home: no home_publish_msg_comment_urls_in_text provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(homeCommentUrlsInTextColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	homeCommentUrlsInTextInsertCacheMut.RLock()
	cache, cached := homeCommentUrlsInTextInsertCache[key]
	homeCommentUrlsInTextInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			homeCommentUrlsInTextAllColumns,
			homeCommentUrlsInTextColumnsWithDefault,
			homeCommentUrlsInTextColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(homeCommentUrlsInTextType, homeCommentUrlsInTextMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(homeCommentUrlsInTextType, homeCommentUrlsInTextMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `home_publish_msg_comment_urls_in_text` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `home_publish_msg_comment_urls_in_text` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `home_publish_msg_comment_urls_in_text` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, homeCommentUrlsInTextPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "home: unable to insert into home_publish_msg_comment_urls_in_text")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == homeCommentUrlsInTextMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "home: unable to populate default values for home_publish_msg_comment_urls_in_text")
	}

CacheNoHooks:
	if !cached {
		homeCommentUrlsInTextInsertCacheMut.Lock()
		homeCommentUrlsInTextInsertCache[key] = cache
		homeCommentUrlsInTextInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HomeCommentUrlsInText.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HomeCommentUrlsInText) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	homeCommentUrlsInTextUpdateCacheMut.RLock()
	cache, cached := homeCommentUrlsInTextUpdateCache[key]
	homeCommentUrlsInTextUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			homeCommentUrlsInTextAllColumns,
			homeCommentUrlsInTextPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("home: unable to update home_publish_msg_comment_urls_in_text, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `home_publish_msg_comment_urls_in_text` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, homeCommentUrlsInTextPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(homeCommentUrlsInTextType, homeCommentUrlsInTextMapping, append(wl, homeCommentUrlsInTextPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update home_publish_msg_comment_urls_in_text row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by update for home_publish_msg_comment_urls_in_text")
	}

	if !cached {
		homeCommentUrlsInTextUpdateCacheMut.Lock()
		homeCommentUrlsInTextUpdateCache[key] = cache
		homeCommentUrlsInTextUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q homeCommentUrlsInTextQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update all for home_publish_msg_comment_urls_in_text")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to retrieve rows affected for home_publish_msg_comment_urls_in_text")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HomeCommentUrlsInTextSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("home: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeCommentUrlsInTextPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `home_publish_msg_comment_urls_in_text` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homeCommentUrlsInTextPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to update all in homeCommentUrlsInText slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to retrieve rows affected all in update all homeCommentUrlsInText")
	}
	return rowsAff, nil
}

var mySQLHomeCommentUrlsInTextUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HomeCommentUrlsInText) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("home: no home_publish_msg_comment_urls_in_text provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(homeCommentUrlsInTextColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLHomeCommentUrlsInTextUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	homeCommentUrlsInTextUpsertCacheMut.RLock()
	cache, cached := homeCommentUrlsInTextUpsertCache[key]
	homeCommentUrlsInTextUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			homeCommentUrlsInTextAllColumns,
			homeCommentUrlsInTextColumnsWithDefault,
			homeCommentUrlsInTextColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			homeCommentUrlsInTextAllColumns,
			homeCommentUrlsInTextPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("home: unable to upsert home_publish_msg_comment_urls_in_text, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "home_publish_msg_comment_urls_in_text", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `home_publish_msg_comment_urls_in_text` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(homeCommentUrlsInTextType, homeCommentUrlsInTextMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(homeCommentUrlsInTextType, homeCommentUrlsInTextMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "home: unable to upsert for home_publish_msg_comment_urls_in_text")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == homeCommentUrlsInTextMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(homeCommentUrlsInTextType, homeCommentUrlsInTextMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "home: unable to retrieve unique values for home_publish_msg_comment_urls_in_text")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "home: unable to populate default values for home_publish_msg_comment_urls_in_text")
	}

CacheNoHooks:
	if !cached {
		homeCommentUrlsInTextUpsertCacheMut.Lock()
		homeCommentUrlsInTextUpsertCache[key] = cache
		homeCommentUrlsInTextUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HomeCommentUrlsInText record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HomeCommentUrlsInText) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("home: no HomeCommentUrlsInText provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), homeCommentUrlsInTextPrimaryKeyMapping)
	sql := "DELETE FROM `home_publish_msg_comment_urls_in_text` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete from home_publish_msg_comment_urls_in_text")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by delete for home_publish_msg_comment_urls_in_text")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q homeCommentUrlsInTextQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("home: no homeCommentUrlsInTextQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete all from home_publish_msg_comment_urls_in_text")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by deleteall for home_publish_msg_comment_urls_in_text")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HomeCommentUrlsInTextSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(homeCommentUrlsInTextBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeCommentUrlsInTextPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `home_publish_msg_comment_urls_in_text` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homeCommentUrlsInTextPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "home: unable to delete all from homeCommentUrlsInText slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "home: failed to get rows affected by deleteall for home_publish_msg_comment_urls_in_text")
	}

	if len(homeCommentUrlsInTextAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HomeCommentUrlsInText) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHomeCommentUrlsInText(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HomeCommentUrlsInTextSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HomeCommentUrlsInTextSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeCommentUrlsInTextPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `home_publish_msg_comment_urls_in_text`.* FROM `home_publish_msg_comment_urls_in_text` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, homeCommentUrlsInTextPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "home: unable to reload all in HomeCommentUrlsInTextSlice")
	}

	*o = slice

	return nil
}

// HomeCommentUrlsInTextExists checks if the HomeCommentUrlsInText row exists.
func HomeCommentUrlsInTextExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `home_publish_msg_comment_urls_in_text` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "home: unable to check if home_publish_msg_comment_urls_in_text exists")
	}

	return exists, nil
}
