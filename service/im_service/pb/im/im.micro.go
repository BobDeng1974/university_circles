// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: im/im.proto

package university_circles_srv_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ImService service

type ImService interface {
	// 发送一对一消息请求
	SendPeerMsg(ctx context.Context, in *SendPeerMsgReq, opts ...client.CallOption) (*Response, error)
	// 发送群组消息请求
	//    rpc SendGroupMsg (SendGroupMsgReq) returns (Response) {}
	// 添加好友
	AddFriends(ctx context.Context, in *AddFriendReq, opts ...client.CallOption) (*Response, error)
	// 删除好友
	DelFriends(ctx context.Context, in *DelFriendReq, opts ...client.CallOption) (*Response, error)
	// 修改好友备注名
	UpdateFriendRemark(ctx context.Context, in *UpdateFriendRemarkReq, opts ...client.CallOption) (*Response, error)
	// 添加好友到黑名单
	AddFriendBlackList(ctx context.Context, in *AddFriendBlackListReq, opts ...client.CallOption) (*Response, error)
	// 从黑名单删除好友
	DelFriendBlackList(ctx context.Context, in *DelFriendBlackListReq, opts ...client.CallOption) (*Response, error)
	// 获取好友列表
	GetAllFriends(ctx context.Context, in *FriendListReq, opts ...client.CallOption) (*FriendListResp, error)
	// 获取黑名单列表
	GetBlackList(ctx context.Context, in *BlackListReq, opts ...client.CallOption) (*BlackListResp, error)
	// 获取用户未读数
	GetUserUnReadCount(ctx context.Context, in *GetUserUnReadCountReq, opts ...client.CallOption) (*GetUserUnReadCountResp, error)
	// 创建群组
	CreateGroup(ctx context.Context, in *Group, opts ...client.CallOption) (*CreateGroupResp, error)
	// 解散群组
	DelGroup(ctx context.Context, in *DelGroupReq, opts ...client.CallOption) (*Response, error)
	// 加入群组
	JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...client.CallOption) (*Response, error)
	// 删除群组成员
	DelGroupMember(ctx context.Context, in *DelGroupMemberReq, opts ...client.CallOption) (*Response, error)
	// 获取群组成员列表
	GetGroupMemberList(ctx context.Context, in *GroupMemberListReq, opts ...client.CallOption) (*GroupMemberListResp, error)
	// 获取群组列表
	GetGroupList(ctx context.Context, in *GroupListReq, opts ...client.CallOption) (*GroupListResp, error)
	// 添加群组文件
	AddGroupFile(ctx context.Context, in *AddGroupFileReq, opts ...client.CallOption) (*Response, error)
	// 获取群组文件
	GetGroupFile(ctx context.Context, in *GroupFileReq, opts ...client.CallOption) (*GroupFileResp, error)
	// 添加群组照片
	AddGroupPicture(ctx context.Context, in *AddGroupPictureReq, opts ...client.CallOption) (*Response, error)
	// 获取群组照片
	GetGroupPicture(ctx context.Context, in *GroupFileReq, opts ...client.CallOption) (*GroupPictureResp, error)
	// 设置群组头像
	UpdateGroupAvatar(ctx context.Context, in *UpdateGroupAvatarReq, opts ...client.CallOption) (*Response, error)
	// 设置群组简介
	UpdateGroupNotice(ctx context.Context, in *UpdateGroupNoticeReq, opts ...client.CallOption) (*Response, error)
	// 设置群组名称
	UpdateGroupName(ctx context.Context, in *UpdateGroupNameReq, opts ...client.CallOption) (*Response, error)
	// 设置加入群组需群主认证
	UpdateGroupJoinAuth(ctx context.Context, in *UpdateGroupJoinAuthReq, opts ...client.CallOption) (*Response, error)
}

type imService struct {
	c    client.Client
	name string
}

func NewImService(name string, c client.Client) ImService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "university_circles.srv.protos"
	}
	return &imService{
		c:    c,
		name: name,
	}
}

func (c *imService) SendPeerMsg(ctx context.Context, in *SendPeerMsgReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.SendPeerMsg", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) AddFriends(ctx context.Context, in *AddFriendReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.AddFriends", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) DelFriends(ctx context.Context, in *DelFriendReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.DelFriends", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) UpdateFriendRemark(ctx context.Context, in *UpdateFriendRemarkReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.UpdateFriendRemark", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) AddFriendBlackList(ctx context.Context, in *AddFriendBlackListReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.AddFriendBlackList", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) DelFriendBlackList(ctx context.Context, in *DelFriendBlackListReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.DelFriendBlackList", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) GetAllFriends(ctx context.Context, in *FriendListReq, opts ...client.CallOption) (*FriendListResp, error) {
	req := c.c.NewRequest(c.name, "ImService.GetAllFriends", in)
	out := new(FriendListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) GetBlackList(ctx context.Context, in *BlackListReq, opts ...client.CallOption) (*BlackListResp, error) {
	req := c.c.NewRequest(c.name, "ImService.GetBlackList", in)
	out := new(BlackListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) GetUserUnReadCount(ctx context.Context, in *GetUserUnReadCountReq, opts ...client.CallOption) (*GetUserUnReadCountResp, error) {
	req := c.c.NewRequest(c.name, "ImService.GetUserUnReadCount", in)
	out := new(GetUserUnReadCountResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) CreateGroup(ctx context.Context, in *Group, opts ...client.CallOption) (*CreateGroupResp, error) {
	req := c.c.NewRequest(c.name, "ImService.CreateGroup", in)
	out := new(CreateGroupResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) DelGroup(ctx context.Context, in *DelGroupReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.DelGroup", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.JoinGroup", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) DelGroupMember(ctx context.Context, in *DelGroupMemberReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.DelGroupMember", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) GetGroupMemberList(ctx context.Context, in *GroupMemberListReq, opts ...client.CallOption) (*GroupMemberListResp, error) {
	req := c.c.NewRequest(c.name, "ImService.GetGroupMemberList", in)
	out := new(GroupMemberListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) GetGroupList(ctx context.Context, in *GroupListReq, opts ...client.CallOption) (*GroupListResp, error) {
	req := c.c.NewRequest(c.name, "ImService.GetGroupList", in)
	out := new(GroupListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) AddGroupFile(ctx context.Context, in *AddGroupFileReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.AddGroupFile", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) GetGroupFile(ctx context.Context, in *GroupFileReq, opts ...client.CallOption) (*GroupFileResp, error) {
	req := c.c.NewRequest(c.name, "ImService.GetGroupFile", in)
	out := new(GroupFileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) AddGroupPicture(ctx context.Context, in *AddGroupPictureReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.AddGroupPicture", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) GetGroupPicture(ctx context.Context, in *GroupFileReq, opts ...client.CallOption) (*GroupPictureResp, error) {
	req := c.c.NewRequest(c.name, "ImService.GetGroupPicture", in)
	out := new(GroupPictureResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) UpdateGroupAvatar(ctx context.Context, in *UpdateGroupAvatarReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.UpdateGroupAvatar", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) UpdateGroupNotice(ctx context.Context, in *UpdateGroupNoticeReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.UpdateGroupNotice", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) UpdateGroupName(ctx context.Context, in *UpdateGroupNameReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.UpdateGroupName", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imService) UpdateGroupJoinAuth(ctx context.Context, in *UpdateGroupJoinAuthReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ImService.UpdateGroupJoinAuth", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImService service

type ImServiceHandler interface {
	// 发送一对一消息请求
	SendPeerMsg(context.Context, *SendPeerMsgReq, *Response) error
	// 发送群组消息请求
	//    rpc SendGroupMsg (SendGroupMsgReq) returns (Response) {}
	// 添加好友
	AddFriends(context.Context, *AddFriendReq, *Response) error
	// 删除好友
	DelFriends(context.Context, *DelFriendReq, *Response) error
	// 修改好友备注名
	UpdateFriendRemark(context.Context, *UpdateFriendRemarkReq, *Response) error
	// 添加好友到黑名单
	AddFriendBlackList(context.Context, *AddFriendBlackListReq, *Response) error
	// 从黑名单删除好友
	DelFriendBlackList(context.Context, *DelFriendBlackListReq, *Response) error
	// 获取好友列表
	GetAllFriends(context.Context, *FriendListReq, *FriendListResp) error
	// 获取黑名单列表
	GetBlackList(context.Context, *BlackListReq, *BlackListResp) error
	// 获取用户未读数
	GetUserUnReadCount(context.Context, *GetUserUnReadCountReq, *GetUserUnReadCountResp) error
	// 创建群组
	CreateGroup(context.Context, *Group, *CreateGroupResp) error
	// 解散群组
	DelGroup(context.Context, *DelGroupReq, *Response) error
	// 加入群组
	JoinGroup(context.Context, *JoinGroupReq, *Response) error
	// 删除群组成员
	DelGroupMember(context.Context, *DelGroupMemberReq, *Response) error
	// 获取群组成员列表
	GetGroupMemberList(context.Context, *GroupMemberListReq, *GroupMemberListResp) error
	// 获取群组列表
	GetGroupList(context.Context, *GroupListReq, *GroupListResp) error
	// 添加群组文件
	AddGroupFile(context.Context, *AddGroupFileReq, *Response) error
	// 获取群组文件
	GetGroupFile(context.Context, *GroupFileReq, *GroupFileResp) error
	// 添加群组照片
	AddGroupPicture(context.Context, *AddGroupPictureReq, *Response) error
	// 获取群组照片
	GetGroupPicture(context.Context, *GroupFileReq, *GroupPictureResp) error
	// 设置群组头像
	UpdateGroupAvatar(context.Context, *UpdateGroupAvatarReq, *Response) error
	// 设置群组简介
	UpdateGroupNotice(context.Context, *UpdateGroupNoticeReq, *Response) error
	// 设置群组名称
	UpdateGroupName(context.Context, *UpdateGroupNameReq, *Response) error
	// 设置加入群组需群主认证
	UpdateGroupJoinAuth(context.Context, *UpdateGroupJoinAuthReq, *Response) error
}

func RegisterImServiceHandler(s server.Server, hdlr ImServiceHandler, opts ...server.HandlerOption) error {
	type imService interface {
		SendPeerMsg(ctx context.Context, in *SendPeerMsgReq, out *Response) error
		AddFriends(ctx context.Context, in *AddFriendReq, out *Response) error
		DelFriends(ctx context.Context, in *DelFriendReq, out *Response) error
		UpdateFriendRemark(ctx context.Context, in *UpdateFriendRemarkReq, out *Response) error
		AddFriendBlackList(ctx context.Context, in *AddFriendBlackListReq, out *Response) error
		DelFriendBlackList(ctx context.Context, in *DelFriendBlackListReq, out *Response) error
		GetAllFriends(ctx context.Context, in *FriendListReq, out *FriendListResp) error
		GetBlackList(ctx context.Context, in *BlackListReq, out *BlackListResp) error
		GetUserUnReadCount(ctx context.Context, in *GetUserUnReadCountReq, out *GetUserUnReadCountResp) error
		CreateGroup(ctx context.Context, in *Group, out *CreateGroupResp) error
		DelGroup(ctx context.Context, in *DelGroupReq, out *Response) error
		JoinGroup(ctx context.Context, in *JoinGroupReq, out *Response) error
		DelGroupMember(ctx context.Context, in *DelGroupMemberReq, out *Response) error
		GetGroupMemberList(ctx context.Context, in *GroupMemberListReq, out *GroupMemberListResp) error
		GetGroupList(ctx context.Context, in *GroupListReq, out *GroupListResp) error
		AddGroupFile(ctx context.Context, in *AddGroupFileReq, out *Response) error
		GetGroupFile(ctx context.Context, in *GroupFileReq, out *GroupFileResp) error
		AddGroupPicture(ctx context.Context, in *AddGroupPictureReq, out *Response) error
		GetGroupPicture(ctx context.Context, in *GroupFileReq, out *GroupPictureResp) error
		UpdateGroupAvatar(ctx context.Context, in *UpdateGroupAvatarReq, out *Response) error
		UpdateGroupNotice(ctx context.Context, in *UpdateGroupNoticeReq, out *Response) error
		UpdateGroupName(ctx context.Context, in *UpdateGroupNameReq, out *Response) error
		UpdateGroupJoinAuth(ctx context.Context, in *UpdateGroupJoinAuthReq, out *Response) error
	}
	type ImService struct {
		imService
	}
	h := &imServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ImService{h}, opts...))
}

type imServiceHandler struct {
	ImServiceHandler
}

func (h *imServiceHandler) SendPeerMsg(ctx context.Context, in *SendPeerMsgReq, out *Response) error {
	return h.ImServiceHandler.SendPeerMsg(ctx, in, out)
}

func (h *imServiceHandler) AddFriends(ctx context.Context, in *AddFriendReq, out *Response) error {
	return h.ImServiceHandler.AddFriends(ctx, in, out)
}

func (h *imServiceHandler) DelFriends(ctx context.Context, in *DelFriendReq, out *Response) error {
	return h.ImServiceHandler.DelFriends(ctx, in, out)
}

func (h *imServiceHandler) UpdateFriendRemark(ctx context.Context, in *UpdateFriendRemarkReq, out *Response) error {
	return h.ImServiceHandler.UpdateFriendRemark(ctx, in, out)
}

func (h *imServiceHandler) AddFriendBlackList(ctx context.Context, in *AddFriendBlackListReq, out *Response) error {
	return h.ImServiceHandler.AddFriendBlackList(ctx, in, out)
}

func (h *imServiceHandler) DelFriendBlackList(ctx context.Context, in *DelFriendBlackListReq, out *Response) error {
	return h.ImServiceHandler.DelFriendBlackList(ctx, in, out)
}

func (h *imServiceHandler) GetAllFriends(ctx context.Context, in *FriendListReq, out *FriendListResp) error {
	return h.ImServiceHandler.GetAllFriends(ctx, in, out)
}

func (h *imServiceHandler) GetBlackList(ctx context.Context, in *BlackListReq, out *BlackListResp) error {
	return h.ImServiceHandler.GetBlackList(ctx, in, out)
}

func (h *imServiceHandler) GetUserUnReadCount(ctx context.Context, in *GetUserUnReadCountReq, out *GetUserUnReadCountResp) error {
	return h.ImServiceHandler.GetUserUnReadCount(ctx, in, out)
}

func (h *imServiceHandler) CreateGroup(ctx context.Context, in *Group, out *CreateGroupResp) error {
	return h.ImServiceHandler.CreateGroup(ctx, in, out)
}

func (h *imServiceHandler) DelGroup(ctx context.Context, in *DelGroupReq, out *Response) error {
	return h.ImServiceHandler.DelGroup(ctx, in, out)
}

func (h *imServiceHandler) JoinGroup(ctx context.Context, in *JoinGroupReq, out *Response) error {
	return h.ImServiceHandler.JoinGroup(ctx, in, out)
}

func (h *imServiceHandler) DelGroupMember(ctx context.Context, in *DelGroupMemberReq, out *Response) error {
	return h.ImServiceHandler.DelGroupMember(ctx, in, out)
}

func (h *imServiceHandler) GetGroupMemberList(ctx context.Context, in *GroupMemberListReq, out *GroupMemberListResp) error {
	return h.ImServiceHandler.GetGroupMemberList(ctx, in, out)
}

func (h *imServiceHandler) GetGroupList(ctx context.Context, in *GroupListReq, out *GroupListResp) error {
	return h.ImServiceHandler.GetGroupList(ctx, in, out)
}

func (h *imServiceHandler) AddGroupFile(ctx context.Context, in *AddGroupFileReq, out *Response) error {
	return h.ImServiceHandler.AddGroupFile(ctx, in, out)
}

func (h *imServiceHandler) GetGroupFile(ctx context.Context, in *GroupFileReq, out *GroupFileResp) error {
	return h.ImServiceHandler.GetGroupFile(ctx, in, out)
}

func (h *imServiceHandler) AddGroupPicture(ctx context.Context, in *AddGroupPictureReq, out *Response) error {
	return h.ImServiceHandler.AddGroupPicture(ctx, in, out)
}

func (h *imServiceHandler) GetGroupPicture(ctx context.Context, in *GroupFileReq, out *GroupPictureResp) error {
	return h.ImServiceHandler.GetGroupPicture(ctx, in, out)
}

func (h *imServiceHandler) UpdateGroupAvatar(ctx context.Context, in *UpdateGroupAvatarReq, out *Response) error {
	return h.ImServiceHandler.UpdateGroupAvatar(ctx, in, out)
}

func (h *imServiceHandler) UpdateGroupNotice(ctx context.Context, in *UpdateGroupNoticeReq, out *Response) error {
	return h.ImServiceHandler.UpdateGroupNotice(ctx, in, out)
}

func (h *imServiceHandler) UpdateGroupName(ctx context.Context, in *UpdateGroupNameReq, out *Response) error {
	return h.ImServiceHandler.UpdateGroupName(ctx, in, out)
}

func (h *imServiceHandler) UpdateGroupJoinAuth(ctx context.Context, in *UpdateGroupJoinAuthReq, out *Response) error {
	return h.ImServiceHandler.UpdateGroupJoinAuth(ctx, in, out)
}
