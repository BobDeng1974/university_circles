// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package user

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UVerifyCode is an object representing the database table.
type UVerifyCode struct {
	ID      int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Phone   string    `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	Code    string    `boil:"code" json:"code" toml:"code" yaml:"code"`
	Created null.Time `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`

	R *uVerifyCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uVerifyCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UVerifyCodeColumns = struct {
	ID      string
	Phone   string
	Code    string
	Created string
}{
	ID:      "id",
	Phone:   "phone",
	Code:    "code",
	Created: "created",
}

// Generated where

var UVerifyCodeWhere = struct {
	ID      whereHelperint
	Phone   whereHelperstring
	Code    whereHelperstring
	Created whereHelpernull_Time
}{
	ID:      whereHelperint{field: "`university_verify_code`.`id`"},
	Phone:   whereHelperstring{field: "`university_verify_code`.`phone`"},
	Code:    whereHelperstring{field: "`university_verify_code`.`code`"},
	Created: whereHelpernull_Time{field: "`university_verify_code`.`created`"},
}

// UVerifyCodeRels is where relationship names are stored.
var UVerifyCodeRels = struct {
}{}

// uVerifyCodeR is where relationships are stored.
type uVerifyCodeR struct {
}

// NewStruct creates a new relationship struct
func (*uVerifyCodeR) NewStruct() *uVerifyCodeR {
	return &uVerifyCodeR{}
}

// uVerifyCodeL is where Load methods for each relationship are stored.
type uVerifyCodeL struct{}

var (
	uVerifyCodeAllColumns            = []string{"id", "phone", "code", "created"}
	uVerifyCodeColumnsWithoutDefault = []string{"phone", "code"}
	uVerifyCodeColumnsWithDefault    = []string{"id", "created"}
	uVerifyCodePrimaryKeyColumns     = []string{"id"}
)

type (
	// UVerifyCodeSlice is an alias for a slice of pointers to UVerifyCode.
	// This should generally be used opposed to []UVerifyCode.
	UVerifyCodeSlice []*UVerifyCode
	// UVerifyCodeHook is the signature for custom UVerifyCode hook methods
	UVerifyCodeHook func(context.Context, boil.ContextExecutor, *UVerifyCode) error

	uVerifyCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uVerifyCodeType                 = reflect.TypeOf(&UVerifyCode{})
	uVerifyCodeMapping              = queries.MakeStructMapping(uVerifyCodeType)
	uVerifyCodePrimaryKeyMapping, _ = queries.BindMapping(uVerifyCodeType, uVerifyCodeMapping, uVerifyCodePrimaryKeyColumns)
	uVerifyCodeInsertCacheMut       sync.RWMutex
	uVerifyCodeInsertCache          = make(map[string]insertCache)
	uVerifyCodeUpdateCacheMut       sync.RWMutex
	uVerifyCodeUpdateCache          = make(map[string]updateCache)
	uVerifyCodeUpsertCacheMut       sync.RWMutex
	uVerifyCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uVerifyCodeBeforeInsertHooks []UVerifyCodeHook
var uVerifyCodeBeforeUpdateHooks []UVerifyCodeHook
var uVerifyCodeBeforeDeleteHooks []UVerifyCodeHook
var uVerifyCodeBeforeUpsertHooks []UVerifyCodeHook

var uVerifyCodeAfterInsertHooks []UVerifyCodeHook
var uVerifyCodeAfterSelectHooks []UVerifyCodeHook
var uVerifyCodeAfterUpdateHooks []UVerifyCodeHook
var uVerifyCodeAfterDeleteHooks []UVerifyCodeHook
var uVerifyCodeAfterUpsertHooks []UVerifyCodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UVerifyCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uVerifyCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UVerifyCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uVerifyCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UVerifyCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uVerifyCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UVerifyCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uVerifyCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UVerifyCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uVerifyCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UVerifyCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uVerifyCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UVerifyCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uVerifyCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UVerifyCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uVerifyCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UVerifyCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uVerifyCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUVerifyCodeHook registers your hook function for all future operations.
func AddUVerifyCodeHook(hookPoint boil.HookPoint, uVerifyCodeHook UVerifyCodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		uVerifyCodeBeforeInsertHooks = append(uVerifyCodeBeforeInsertHooks, uVerifyCodeHook)
	case boil.BeforeUpdateHook:
		uVerifyCodeBeforeUpdateHooks = append(uVerifyCodeBeforeUpdateHooks, uVerifyCodeHook)
	case boil.BeforeDeleteHook:
		uVerifyCodeBeforeDeleteHooks = append(uVerifyCodeBeforeDeleteHooks, uVerifyCodeHook)
	case boil.BeforeUpsertHook:
		uVerifyCodeBeforeUpsertHooks = append(uVerifyCodeBeforeUpsertHooks, uVerifyCodeHook)
	case boil.AfterInsertHook:
		uVerifyCodeAfterInsertHooks = append(uVerifyCodeAfterInsertHooks, uVerifyCodeHook)
	case boil.AfterSelectHook:
		uVerifyCodeAfterSelectHooks = append(uVerifyCodeAfterSelectHooks, uVerifyCodeHook)
	case boil.AfterUpdateHook:
		uVerifyCodeAfterUpdateHooks = append(uVerifyCodeAfterUpdateHooks, uVerifyCodeHook)
	case boil.AfterDeleteHook:
		uVerifyCodeAfterDeleteHooks = append(uVerifyCodeAfterDeleteHooks, uVerifyCodeHook)
	case boil.AfterUpsertHook:
		uVerifyCodeAfterUpsertHooks = append(uVerifyCodeAfterUpsertHooks, uVerifyCodeHook)
	}
}

// One returns a single uVerifyCode record from the query.
func (q uVerifyCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UVerifyCode, error) {
	o := &UVerifyCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "user: failed to execute a one query for university_verify_code")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UVerifyCode records from the query.
func (q uVerifyCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (UVerifyCodeSlice, error) {
	var o []*UVerifyCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "user: failed to assign all query results to UVerifyCode slice")
	}

	if len(uVerifyCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UVerifyCode records in the query.
func (q uVerifyCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "user: failed to count university_verify_code rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uVerifyCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "user: failed to check if university_verify_code exists")
	}

	return count > 0, nil
}

// UVerifyCodes retrieves all the records using an executor.
func UVerifyCodes(mods ...qm.QueryMod) uVerifyCodeQuery {
	mods = append(mods, qm.From("`university_verify_code`"))
	return uVerifyCodeQuery{NewQuery(mods...)}
}

// FindUVerifyCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUVerifyCode(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UVerifyCode, error) {
	uVerifyCodeObj := &UVerifyCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `university_verify_code` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, uVerifyCodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "user: unable to select from university_verify_code")
	}

	return uVerifyCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UVerifyCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("user: no university_verify_code provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uVerifyCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uVerifyCodeInsertCacheMut.RLock()
	cache, cached := uVerifyCodeInsertCache[key]
	uVerifyCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uVerifyCodeAllColumns,
			uVerifyCodeColumnsWithDefault,
			uVerifyCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uVerifyCodeType, uVerifyCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uVerifyCodeType, uVerifyCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `university_verify_code` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `university_verify_code` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `university_verify_code` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, uVerifyCodePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "user: unable to insert into university_verify_code")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == uVerifyCodeMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "user: unable to populate default values for university_verify_code")
	}

CacheNoHooks:
	if !cached {
		uVerifyCodeInsertCacheMut.Lock()
		uVerifyCodeInsertCache[key] = cache
		uVerifyCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UVerifyCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UVerifyCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uVerifyCodeUpdateCacheMut.RLock()
	cache, cached := uVerifyCodeUpdateCache[key]
	uVerifyCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uVerifyCodeAllColumns,
			uVerifyCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("user: unable to update university_verify_code, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `university_verify_code` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, uVerifyCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uVerifyCodeType, uVerifyCodeMapping, append(wl, uVerifyCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "user: unable to update university_verify_code row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "user: failed to get rows affected by update for university_verify_code")
	}

	if !cached {
		uVerifyCodeUpdateCacheMut.Lock()
		uVerifyCodeUpdateCache[key] = cache
		uVerifyCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q uVerifyCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "user: unable to update all for university_verify_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "user: unable to retrieve rows affected for university_verify_code")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UVerifyCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("user: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uVerifyCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `university_verify_code` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uVerifyCodePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "user: unable to update all in uVerifyCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "user: unable to retrieve rows affected all in update all uVerifyCode")
	}
	return rowsAff, nil
}

var mySQLUVerifyCodeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UVerifyCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("user: no university_verify_code provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uVerifyCodeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUVerifyCodeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uVerifyCodeUpsertCacheMut.RLock()
	cache, cached := uVerifyCodeUpsertCache[key]
	uVerifyCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			uVerifyCodeAllColumns,
			uVerifyCodeColumnsWithDefault,
			uVerifyCodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			uVerifyCodeAllColumns,
			uVerifyCodePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("user: unable to upsert university_verify_code, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "university_verify_code", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `university_verify_code` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(uVerifyCodeType, uVerifyCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uVerifyCodeType, uVerifyCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "user: unable to upsert for university_verify_code")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == uVerifyCodeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(uVerifyCodeType, uVerifyCodeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "user: unable to retrieve unique values for university_verify_code")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "user: unable to populate default values for university_verify_code")
	}

CacheNoHooks:
	if !cached {
		uVerifyCodeUpsertCacheMut.Lock()
		uVerifyCodeUpsertCache[key] = cache
		uVerifyCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UVerifyCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UVerifyCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("user: no UVerifyCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uVerifyCodePrimaryKeyMapping)
	sql := "DELETE FROM `university_verify_code` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "user: unable to delete from university_verify_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "user: failed to get rows affected by delete for university_verify_code")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uVerifyCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("user: no uVerifyCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "user: unable to delete all from university_verify_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "user: failed to get rows affected by deleteall for university_verify_code")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UVerifyCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uVerifyCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uVerifyCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `university_verify_code` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uVerifyCodePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "user: unable to delete all from uVerifyCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "user: failed to get rows affected by deleteall for university_verify_code")
	}

	if len(uVerifyCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UVerifyCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUVerifyCode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UVerifyCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UVerifyCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uVerifyCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `university_verify_code`.* FROM `university_verify_code` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uVerifyCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "user: unable to reload all in UVerifyCodeSlice")
	}

	*o = slice

	return nil
}

// UVerifyCodeExists checks if the UVerifyCode row exists.
func UVerifyCodeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `university_verify_code` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "user: unable to check if university_verify_code exists")
	}

	return exists, nil
}
