// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: home/home.proto

package university_circles_srv_home

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for HomeService service

type HomeService interface {
	// 发布动态
	SavePublishMsg(ctx context.Context, in *PublishMsg, opts ...client.CallOption) (*Response, error)
	// 删除动态
	DeletePublishMsg(ctx context.Context, in *DeleteMsgRequest, opts ...client.CallOption) (*Response, error)
	// 获取首页动态列表
	GetHomeMsgList(ctx context.Context, in *AllMsgListRequest, opts ...client.CallOption) (*HomeMsgListResponse, error)
	// 获取某个用户的动态列表
	GetUserMsgList(ctx context.Context, in *UserMsgListRequest, opts ...client.CallOption) (*OtherMsgListResponse, error)
	// 获取某个动态详情
	GetMsgDetail(ctx context.Context, in *OneMsgRequest, opts ...client.CallOption) (*OtherMsgListResponse, error)
	// 发布动态评论
	SaveMsgComment(ctx context.Context, in *PublishMsgComment, opts ...client.CallOption) (*Response, error)
	// 获取评论列表
	GetMsgCommentList(ctx context.Context, in *MsgCommentListRequest, opts ...client.CallOption) (*MsgCommentListResponse, error)
	// 删除评论
	DeletePublishMsgComment(ctx context.Context, in *DeleteMsgCommentRequest, opts ...client.CallOption) (*Response, error)
	// 记录用户操作动态数，如分享、评论、点赞
	SaveUserOperateMsgCount(ctx context.Context, in *UserOperateCountRequest, opts ...client.CallOption) (*Response, error)
	// 获取用户操作动态数，如分享数、评论数、点赞数
	GetUserOperateMsgCount(ctx context.Context, in *UserOperateCountRequest, opts ...client.CallOption) (*UserOperateCountResponse, error)
	// 获取用户操作的列表数据，如评论过的动态列表
	GetUserOperateMsgRecodeList(ctx context.Context, in *UserOperateRecodeListRequest, opts ...client.CallOption) (*OtherMsgListResponse, error)
}

type homeService struct {
	c    client.Client
	name string
}

func NewHomeService(name string, c client.Client) HomeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "university_circles.srv.home"
	}
	return &homeService{
		c:    c,
		name: name,
	}
}

func (c *homeService) SavePublishMsg(ctx context.Context, in *PublishMsg, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "HomeService.SavePublishMsg", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeService) DeletePublishMsg(ctx context.Context, in *DeleteMsgRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "HomeService.DeletePublishMsg", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeService) GetHomeMsgList(ctx context.Context, in *AllMsgListRequest, opts ...client.CallOption) (*HomeMsgListResponse, error) {
	req := c.c.NewRequest(c.name, "HomeService.GetHomeMsgList", in)
	out := new(HomeMsgListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeService) GetUserMsgList(ctx context.Context, in *UserMsgListRequest, opts ...client.CallOption) (*OtherMsgListResponse, error) {
	req := c.c.NewRequest(c.name, "HomeService.GetUserMsgList", in)
	out := new(OtherMsgListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeService) GetMsgDetail(ctx context.Context, in *OneMsgRequest, opts ...client.CallOption) (*OtherMsgListResponse, error) {
	req := c.c.NewRequest(c.name, "HomeService.GetMsgDetail", in)
	out := new(OtherMsgListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeService) SaveMsgComment(ctx context.Context, in *PublishMsgComment, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "HomeService.SaveMsgComment", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeService) GetMsgCommentList(ctx context.Context, in *MsgCommentListRequest, opts ...client.CallOption) (*MsgCommentListResponse, error) {
	req := c.c.NewRequest(c.name, "HomeService.GetMsgCommentList", in)
	out := new(MsgCommentListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeService) DeletePublishMsgComment(ctx context.Context, in *DeleteMsgCommentRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "HomeService.DeletePublishMsgComment", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeService) SaveUserOperateMsgCount(ctx context.Context, in *UserOperateCountRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "HomeService.SaveUserOperateMsgCount", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeService) GetUserOperateMsgCount(ctx context.Context, in *UserOperateCountRequest, opts ...client.CallOption) (*UserOperateCountResponse, error) {
	req := c.c.NewRequest(c.name, "HomeService.GetUserOperateMsgCount", in)
	out := new(UserOperateCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeService) GetUserOperateMsgRecodeList(ctx context.Context, in *UserOperateRecodeListRequest, opts ...client.CallOption) (*OtherMsgListResponse, error) {
	req := c.c.NewRequest(c.name, "HomeService.GetUserOperateMsgRecodeList", in)
	out := new(OtherMsgListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HomeService service

type HomeServiceHandler interface {
	// 发布动态
	SavePublishMsg(context.Context, *PublishMsg, *Response) error
	// 删除动态
	DeletePublishMsg(context.Context, *DeleteMsgRequest, *Response) error
	// 获取首页动态列表
	GetHomeMsgList(context.Context, *AllMsgListRequest, *HomeMsgListResponse) error
	// 获取某个用户的动态列表
	GetUserMsgList(context.Context, *UserMsgListRequest, *OtherMsgListResponse) error
	// 获取某个动态详情
	GetMsgDetail(context.Context, *OneMsgRequest, *OtherMsgListResponse) error
	// 发布动态评论
	SaveMsgComment(context.Context, *PublishMsgComment, *Response) error
	// 获取评论列表
	GetMsgCommentList(context.Context, *MsgCommentListRequest, *MsgCommentListResponse) error
	// 删除评论
	DeletePublishMsgComment(context.Context, *DeleteMsgCommentRequest, *Response) error
	// 记录用户操作动态数，如分享、评论、点赞
	SaveUserOperateMsgCount(context.Context, *UserOperateCountRequest, *Response) error
	// 获取用户操作动态数，如分享数、评论数、点赞数
	GetUserOperateMsgCount(context.Context, *UserOperateCountRequest, *UserOperateCountResponse) error
	// 获取用户操作的列表数据，如评论过的动态列表
	GetUserOperateMsgRecodeList(context.Context, *UserOperateRecodeListRequest, *OtherMsgListResponse) error
}

func RegisterHomeServiceHandler(s server.Server, hdlr HomeServiceHandler, opts ...server.HandlerOption) error {
	type homeService interface {
		SavePublishMsg(ctx context.Context, in *PublishMsg, out *Response) error
		DeletePublishMsg(ctx context.Context, in *DeleteMsgRequest, out *Response) error
		GetHomeMsgList(ctx context.Context, in *AllMsgListRequest, out *HomeMsgListResponse) error
		GetUserMsgList(ctx context.Context, in *UserMsgListRequest, out *OtherMsgListResponse) error
		GetMsgDetail(ctx context.Context, in *OneMsgRequest, out *OtherMsgListResponse) error
		SaveMsgComment(ctx context.Context, in *PublishMsgComment, out *Response) error
		GetMsgCommentList(ctx context.Context, in *MsgCommentListRequest, out *MsgCommentListResponse) error
		DeletePublishMsgComment(ctx context.Context, in *DeleteMsgCommentRequest, out *Response) error
		SaveUserOperateMsgCount(ctx context.Context, in *UserOperateCountRequest, out *Response) error
		GetUserOperateMsgCount(ctx context.Context, in *UserOperateCountRequest, out *UserOperateCountResponse) error
		GetUserOperateMsgRecodeList(ctx context.Context, in *UserOperateRecodeListRequest, out *OtherMsgListResponse) error
	}
	type HomeService struct {
		homeService
	}
	h := &homeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HomeService{h}, opts...))
}

type homeServiceHandler struct {
	HomeServiceHandler
}

func (h *homeServiceHandler) SavePublishMsg(ctx context.Context, in *PublishMsg, out *Response) error {
	return h.HomeServiceHandler.SavePublishMsg(ctx, in, out)
}

func (h *homeServiceHandler) DeletePublishMsg(ctx context.Context, in *DeleteMsgRequest, out *Response) error {
	return h.HomeServiceHandler.DeletePublishMsg(ctx, in, out)
}

func (h *homeServiceHandler) GetHomeMsgList(ctx context.Context, in *AllMsgListRequest, out *HomeMsgListResponse) error {
	return h.HomeServiceHandler.GetHomeMsgList(ctx, in, out)
}

func (h *homeServiceHandler) GetUserMsgList(ctx context.Context, in *UserMsgListRequest, out *OtherMsgListResponse) error {
	return h.HomeServiceHandler.GetUserMsgList(ctx, in, out)
}

func (h *homeServiceHandler) GetMsgDetail(ctx context.Context, in *OneMsgRequest, out *OtherMsgListResponse) error {
	return h.HomeServiceHandler.GetMsgDetail(ctx, in, out)
}

func (h *homeServiceHandler) SaveMsgComment(ctx context.Context, in *PublishMsgComment, out *Response) error {
	return h.HomeServiceHandler.SaveMsgComment(ctx, in, out)
}

func (h *homeServiceHandler) GetMsgCommentList(ctx context.Context, in *MsgCommentListRequest, out *MsgCommentListResponse) error {
	return h.HomeServiceHandler.GetMsgCommentList(ctx, in, out)
}

func (h *homeServiceHandler) DeletePublishMsgComment(ctx context.Context, in *DeleteMsgCommentRequest, out *Response) error {
	return h.HomeServiceHandler.DeletePublishMsgComment(ctx, in, out)
}

func (h *homeServiceHandler) SaveUserOperateMsgCount(ctx context.Context, in *UserOperateCountRequest, out *Response) error {
	return h.HomeServiceHandler.SaveUserOperateMsgCount(ctx, in, out)
}

func (h *homeServiceHandler) GetUserOperateMsgCount(ctx context.Context, in *UserOperateCountRequest, out *UserOperateCountResponse) error {
	return h.HomeServiceHandler.GetUserOperateMsgCount(ctx, in, out)
}

func (h *homeServiceHandler) GetUserOperateMsgRecodeList(ctx context.Context, in *UserOperateRecodeListRequest, out *OtherMsgListResponse) error {
	return h.HomeServiceHandler.GetUserOperateMsgRecodeList(ctx, in, out)
}
