// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user/user.proto

package university_circles_srv_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	// 学生注册
	StudentRegister(ctx context.Context, in *UserRegisterReq, opts ...client.CallOption) (*Response, error)
	// 用户注册校验验证码
	CheckVerifyCode(ctx context.Context, in *VerifyCodeRegReq, opts ...client.CallOption) (*Response, error)
	// 学生注册信息
	//    rpc AddStudentInfo (StudentRegInfo) returns (Response) {}
	// 修改某个学生基础信息
	UpdateStudentInfo(ctx context.Context, in *UpdateStudentInfoReq, opts ...client.CallOption) (*Response, error)
	// 根据ID获取某个学生的信息
	GetStudentInfoById(ctx context.Context, in *GetStudentByIdReq, opts ...client.CallOption) (*StudentInfoDetail, error)
	// 根据用户名获取某个学生的信息
	GetStudentInfoByUsername(ctx context.Context, in *GetStudentByUsernameReq, opts ...client.CallOption) (*StudentInfoDetail, error)
	// 获取模糊查询的所有大学
	GetUniversity(ctx context.Context, in *GetUniversityReq, opts ...client.CallOption) (*GetUniversityListResponse, error)
	// 获取所有大学
	GetUniversityList(ctx context.Context, in *GetUniversityListReq, opts ...client.CallOption) (*GetUniversityListResponse, error)
	// 获取某个学校的所有学院
	GetCollegeList(ctx context.Context, in *GetCollegeListReq, opts ...client.CallOption) (*GetCollegeListResponse, error)
	// 获取某个学校某个学院的学科
	GetProfessionList(ctx context.Context, in *GetProfessionListReq, opts ...client.CallOption) (*GetProfessionListResponse, error)
	// 获取某个学校某个学院的学科的班级
	GetClassList(ctx context.Context, in *GetClassListReq, opts ...client.CallOption) (*GetClassListResponse, error)
	// 教师注册
	TeacherRegister(ctx context.Context, in *UserRegisterReq, opts ...client.CallOption) (*Response, error)
	UpdateTeacherInfo(ctx context.Context, in *UpdateTeacherInfoReq, opts ...client.CallOption) (*Response, error)
	GetTeacherInfoById(ctx context.Context, in *GetTeacherByIdReq, opts ...client.CallOption) (*TeacherInfoDetail, error)
	GetTeacherListByUniversityId(ctx context.Context, in *GetTeacherListByUniIdReq, opts ...client.CallOption) (*TeacherListResp, error)
	GetTeacherListByCollegeId(ctx context.Context, in *GetTeacherListByCollegeIdReq, opts ...client.CallOption) (*TeacherListResp, error)
	// 修改头像
	UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...client.CallOption) (*Response, error)
	// 修改用户手机
	UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneReq, opts ...client.CallOption) (*Response, error)
	// 修改用户密码
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...client.CallOption) (*Response, error)
	// 查询添加的用户的信息
	QueryUser(ctx context.Context, in *QueryUserReq, opts ...client.CallOption) (*QueryUserResp, error)
	// 根据手机号、用户名判断用户是否存在
	CheckUserIsExist(ctx context.Context, in *CheckUserIsExistReq, opts ...client.CallOption) (*Response, error)
	// 关注某个用户
	SaveUserFollow(ctx context.Context, in *UserFollowOperateReq, opts ...client.CallOption) (*Response, error)
	// 取消关注某个用户
	CancelUserFollow(ctx context.Context, in *UserFollowOperateReq, opts ...client.CallOption) (*Response, error)
	// 获取某个用户关注的用户列表
	GetUserFollowList(ctx context.Context, in *UserFollowListReq, opts ...client.CallOption) (*UserFollowOperateResponse, error)
	// 获取某个用户被关注的用户列表
	GetUserFollowingList(ctx context.Context, in *UserFollowListReq, opts ...client.CallOption) (*UserFollowOperateResponse, error)
	// 密码登录
	PwdLogin(ctx context.Context, in *PwdLoginReq, opts ...client.CallOption) (*LoginResponse, error)
	// 验证码登录
	VerifyCodeLogin(ctx context.Context, in *VerifyCodeLoginReq, opts ...client.CallOption) (*LoginResponse, error)
	// 登出
	Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*Response, error)
	// 发送验证码
	GetVerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...client.CallOption) (*VerifyCodeResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "university_circles.srv.user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) StudentRegister(ctx context.Context, in *UserRegisterReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.StudentRegister", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CheckVerifyCode(ctx context.Context, in *VerifyCodeRegReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.CheckVerifyCode", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateStudentInfo(ctx context.Context, in *UpdateStudentInfoReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateStudentInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetStudentInfoById(ctx context.Context, in *GetStudentByIdReq, opts ...client.CallOption) (*StudentInfoDetail, error) {
	req := c.c.NewRequest(c.name, "UserService.GetStudentInfoById", in)
	out := new(StudentInfoDetail)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetStudentInfoByUsername(ctx context.Context, in *GetStudentByUsernameReq, opts ...client.CallOption) (*StudentInfoDetail, error) {
	req := c.c.NewRequest(c.name, "UserService.GetStudentInfoByUsername", in)
	out := new(StudentInfoDetail)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUniversity(ctx context.Context, in *GetUniversityReq, opts ...client.CallOption) (*GetUniversityListResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUniversity", in)
	out := new(GetUniversityListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUniversityList(ctx context.Context, in *GetUniversityListReq, opts ...client.CallOption) (*GetUniversityListResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUniversityList", in)
	out := new(GetUniversityListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetCollegeList(ctx context.Context, in *GetCollegeListReq, opts ...client.CallOption) (*GetCollegeListResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetCollegeList", in)
	out := new(GetCollegeListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetProfessionList(ctx context.Context, in *GetProfessionListReq, opts ...client.CallOption) (*GetProfessionListResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetProfessionList", in)
	out := new(GetProfessionListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetClassList(ctx context.Context, in *GetClassListReq, opts ...client.CallOption) (*GetClassListResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetClassList", in)
	out := new(GetClassListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) TeacherRegister(ctx context.Context, in *UserRegisterReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.TeacherRegister", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateTeacherInfo(ctx context.Context, in *UpdateTeacherInfoReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateTeacherInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetTeacherInfoById(ctx context.Context, in *GetTeacherByIdReq, opts ...client.CallOption) (*TeacherInfoDetail, error) {
	req := c.c.NewRequest(c.name, "UserService.GetTeacherInfoById", in)
	out := new(TeacherInfoDetail)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetTeacherListByUniversityId(ctx context.Context, in *GetTeacherListByUniIdReq, opts ...client.CallOption) (*TeacherListResp, error) {
	req := c.c.NewRequest(c.name, "UserService.GetTeacherListByUniversityId", in)
	out := new(TeacherListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetTeacherListByCollegeId(ctx context.Context, in *GetTeacherListByCollegeIdReq, opts ...client.CallOption) (*TeacherListResp, error) {
	req := c.c.NewRequest(c.name, "UserService.GetTeacherListByCollegeId", in)
	out := new(TeacherListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUserAvatar", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUserPhone", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUserPassword", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) QueryUser(ctx context.Context, in *QueryUserReq, opts ...client.CallOption) (*QueryUserResp, error) {
	req := c.c.NewRequest(c.name, "UserService.QueryUser", in)
	out := new(QueryUserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CheckUserIsExist(ctx context.Context, in *CheckUserIsExistReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.CheckUserIsExist", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SaveUserFollow(ctx context.Context, in *UserFollowOperateReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.SaveUserFollow", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CancelUserFollow(ctx context.Context, in *UserFollowOperateReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.CancelUserFollow", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserFollowList(ctx context.Context, in *UserFollowListReq, opts ...client.CallOption) (*UserFollowOperateResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserFollowList", in)
	out := new(UserFollowOperateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserFollowingList(ctx context.Context, in *UserFollowListReq, opts ...client.CallOption) (*UserFollowOperateResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserFollowingList", in)
	out := new(UserFollowOperateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) PwdLogin(ctx context.Context, in *PwdLoginReq, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.PwdLogin", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifyCodeLogin(ctx context.Context, in *VerifyCodeLoginReq, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.VerifyCodeLogin", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.Logout", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetVerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...client.CallOption) (*VerifyCodeResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetVerifyCode", in)
	out := new(VerifyCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	// 学生注册
	StudentRegister(context.Context, *UserRegisterReq, *Response) error
	// 用户注册校验验证码
	CheckVerifyCode(context.Context, *VerifyCodeRegReq, *Response) error
	// 学生注册信息
	//    rpc AddStudentInfo (StudentRegInfo) returns (Response) {}
	// 修改某个学生基础信息
	UpdateStudentInfo(context.Context, *UpdateStudentInfoReq, *Response) error
	// 根据ID获取某个学生的信息
	GetStudentInfoById(context.Context, *GetStudentByIdReq, *StudentInfoDetail) error
	// 根据用户名获取某个学生的信息
	GetStudentInfoByUsername(context.Context, *GetStudentByUsernameReq, *StudentInfoDetail) error
	// 获取模糊查询的所有大学
	GetUniversity(context.Context, *GetUniversityReq, *GetUniversityListResponse) error
	// 获取所有大学
	GetUniversityList(context.Context, *GetUniversityListReq, *GetUniversityListResponse) error
	// 获取某个学校的所有学院
	GetCollegeList(context.Context, *GetCollegeListReq, *GetCollegeListResponse) error
	// 获取某个学校某个学院的学科
	GetProfessionList(context.Context, *GetProfessionListReq, *GetProfessionListResponse) error
	// 获取某个学校某个学院的学科的班级
	GetClassList(context.Context, *GetClassListReq, *GetClassListResponse) error
	// 教师注册
	TeacherRegister(context.Context, *UserRegisterReq, *Response) error
	UpdateTeacherInfo(context.Context, *UpdateTeacherInfoReq, *Response) error
	GetTeacherInfoById(context.Context, *GetTeacherByIdReq, *TeacherInfoDetail) error
	GetTeacherListByUniversityId(context.Context, *GetTeacherListByUniIdReq, *TeacherListResp) error
	GetTeacherListByCollegeId(context.Context, *GetTeacherListByCollegeIdReq, *TeacherListResp) error
	// 修改头像
	UpdateUserAvatar(context.Context, *UpdateUserAvatarReq, *Response) error
	// 修改用户手机
	UpdateUserPhone(context.Context, *UpdateUserPhoneReq, *Response) error
	// 修改用户密码
	UpdateUserPassword(context.Context, *UpdateUserPasswordReq, *Response) error
	// 查询添加的用户的信息
	QueryUser(context.Context, *QueryUserReq, *QueryUserResp) error
	// 根据手机号、用户名判断用户是否存在
	CheckUserIsExist(context.Context, *CheckUserIsExistReq, *Response) error
	// 关注某个用户
	SaveUserFollow(context.Context, *UserFollowOperateReq, *Response) error
	// 取消关注某个用户
	CancelUserFollow(context.Context, *UserFollowOperateReq, *Response) error
	// 获取某个用户关注的用户列表
	GetUserFollowList(context.Context, *UserFollowListReq, *UserFollowOperateResponse) error
	// 获取某个用户被关注的用户列表
	GetUserFollowingList(context.Context, *UserFollowListReq, *UserFollowOperateResponse) error
	// 密码登录
	PwdLogin(context.Context, *PwdLoginReq, *LoginResponse) error
	// 验证码登录
	VerifyCodeLogin(context.Context, *VerifyCodeLoginReq, *LoginResponse) error
	// 登出
	Logout(context.Context, *LogoutReq, *Response) error
	// 发送验证码
	GetVerifyCode(context.Context, *VerifyCodeReq, *VerifyCodeResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		StudentRegister(ctx context.Context, in *UserRegisterReq, out *Response) error
		CheckVerifyCode(ctx context.Context, in *VerifyCodeRegReq, out *Response) error
		UpdateStudentInfo(ctx context.Context, in *UpdateStudentInfoReq, out *Response) error
		GetStudentInfoById(ctx context.Context, in *GetStudentByIdReq, out *StudentInfoDetail) error
		GetStudentInfoByUsername(ctx context.Context, in *GetStudentByUsernameReq, out *StudentInfoDetail) error
		GetUniversity(ctx context.Context, in *GetUniversityReq, out *GetUniversityListResponse) error
		GetUniversityList(ctx context.Context, in *GetUniversityListReq, out *GetUniversityListResponse) error
		GetCollegeList(ctx context.Context, in *GetCollegeListReq, out *GetCollegeListResponse) error
		GetProfessionList(ctx context.Context, in *GetProfessionListReq, out *GetProfessionListResponse) error
		GetClassList(ctx context.Context, in *GetClassListReq, out *GetClassListResponse) error
		TeacherRegister(ctx context.Context, in *UserRegisterReq, out *Response) error
		UpdateTeacherInfo(ctx context.Context, in *UpdateTeacherInfoReq, out *Response) error
		GetTeacherInfoById(ctx context.Context, in *GetTeacherByIdReq, out *TeacherInfoDetail) error
		GetTeacherListByUniversityId(ctx context.Context, in *GetTeacherListByUniIdReq, out *TeacherListResp) error
		GetTeacherListByCollegeId(ctx context.Context, in *GetTeacherListByCollegeIdReq, out *TeacherListResp) error
		UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, out *Response) error
		UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneReq, out *Response) error
		UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, out *Response) error
		QueryUser(ctx context.Context, in *QueryUserReq, out *QueryUserResp) error
		CheckUserIsExist(ctx context.Context, in *CheckUserIsExistReq, out *Response) error
		SaveUserFollow(ctx context.Context, in *UserFollowOperateReq, out *Response) error
		CancelUserFollow(ctx context.Context, in *UserFollowOperateReq, out *Response) error
		GetUserFollowList(ctx context.Context, in *UserFollowListReq, out *UserFollowOperateResponse) error
		GetUserFollowingList(ctx context.Context, in *UserFollowListReq, out *UserFollowOperateResponse) error
		PwdLogin(ctx context.Context, in *PwdLoginReq, out *LoginResponse) error
		VerifyCodeLogin(ctx context.Context, in *VerifyCodeLoginReq, out *LoginResponse) error
		Logout(ctx context.Context, in *LogoutReq, out *Response) error
		GetVerifyCode(ctx context.Context, in *VerifyCodeReq, out *VerifyCodeResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) StudentRegister(ctx context.Context, in *UserRegisterReq, out *Response) error {
	return h.UserServiceHandler.StudentRegister(ctx, in, out)
}

func (h *userServiceHandler) CheckVerifyCode(ctx context.Context, in *VerifyCodeRegReq, out *Response) error {
	return h.UserServiceHandler.CheckVerifyCode(ctx, in, out)
}

func (h *userServiceHandler) UpdateStudentInfo(ctx context.Context, in *UpdateStudentInfoReq, out *Response) error {
	return h.UserServiceHandler.UpdateStudentInfo(ctx, in, out)
}

func (h *userServiceHandler) GetStudentInfoById(ctx context.Context, in *GetStudentByIdReq, out *StudentInfoDetail) error {
	return h.UserServiceHandler.GetStudentInfoById(ctx, in, out)
}

func (h *userServiceHandler) GetStudentInfoByUsername(ctx context.Context, in *GetStudentByUsernameReq, out *StudentInfoDetail) error {
	return h.UserServiceHandler.GetStudentInfoByUsername(ctx, in, out)
}

func (h *userServiceHandler) GetUniversity(ctx context.Context, in *GetUniversityReq, out *GetUniversityListResponse) error {
	return h.UserServiceHandler.GetUniversity(ctx, in, out)
}

func (h *userServiceHandler) GetUniversityList(ctx context.Context, in *GetUniversityListReq, out *GetUniversityListResponse) error {
	return h.UserServiceHandler.GetUniversityList(ctx, in, out)
}

func (h *userServiceHandler) GetCollegeList(ctx context.Context, in *GetCollegeListReq, out *GetCollegeListResponse) error {
	return h.UserServiceHandler.GetCollegeList(ctx, in, out)
}

func (h *userServiceHandler) GetProfessionList(ctx context.Context, in *GetProfessionListReq, out *GetProfessionListResponse) error {
	return h.UserServiceHandler.GetProfessionList(ctx, in, out)
}

func (h *userServiceHandler) GetClassList(ctx context.Context, in *GetClassListReq, out *GetClassListResponse) error {
	return h.UserServiceHandler.GetClassList(ctx, in, out)
}

func (h *userServiceHandler) TeacherRegister(ctx context.Context, in *UserRegisterReq, out *Response) error {
	return h.UserServiceHandler.TeacherRegister(ctx, in, out)
}

func (h *userServiceHandler) UpdateTeacherInfo(ctx context.Context, in *UpdateTeacherInfoReq, out *Response) error {
	return h.UserServiceHandler.UpdateTeacherInfo(ctx, in, out)
}

func (h *userServiceHandler) GetTeacherInfoById(ctx context.Context, in *GetTeacherByIdReq, out *TeacherInfoDetail) error {
	return h.UserServiceHandler.GetTeacherInfoById(ctx, in, out)
}

func (h *userServiceHandler) GetTeacherListByUniversityId(ctx context.Context, in *GetTeacherListByUniIdReq, out *TeacherListResp) error {
	return h.UserServiceHandler.GetTeacherListByUniversityId(ctx, in, out)
}

func (h *userServiceHandler) GetTeacherListByCollegeId(ctx context.Context, in *GetTeacherListByCollegeIdReq, out *TeacherListResp) error {
	return h.UserServiceHandler.GetTeacherListByCollegeId(ctx, in, out)
}

func (h *userServiceHandler) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, out *Response) error {
	return h.UserServiceHandler.UpdateUserAvatar(ctx, in, out)
}

func (h *userServiceHandler) UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneReq, out *Response) error {
	return h.UserServiceHandler.UpdateUserPhone(ctx, in, out)
}

func (h *userServiceHandler) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, out *Response) error {
	return h.UserServiceHandler.UpdateUserPassword(ctx, in, out)
}

func (h *userServiceHandler) QueryUser(ctx context.Context, in *QueryUserReq, out *QueryUserResp) error {
	return h.UserServiceHandler.QueryUser(ctx, in, out)
}

func (h *userServiceHandler) CheckUserIsExist(ctx context.Context, in *CheckUserIsExistReq, out *Response) error {
	return h.UserServiceHandler.CheckUserIsExist(ctx, in, out)
}

func (h *userServiceHandler) SaveUserFollow(ctx context.Context, in *UserFollowOperateReq, out *Response) error {
	return h.UserServiceHandler.SaveUserFollow(ctx, in, out)
}

func (h *userServiceHandler) CancelUserFollow(ctx context.Context, in *UserFollowOperateReq, out *Response) error {
	return h.UserServiceHandler.CancelUserFollow(ctx, in, out)
}

func (h *userServiceHandler) GetUserFollowList(ctx context.Context, in *UserFollowListReq, out *UserFollowOperateResponse) error {
	return h.UserServiceHandler.GetUserFollowList(ctx, in, out)
}

func (h *userServiceHandler) GetUserFollowingList(ctx context.Context, in *UserFollowListReq, out *UserFollowOperateResponse) error {
	return h.UserServiceHandler.GetUserFollowingList(ctx, in, out)
}

func (h *userServiceHandler) PwdLogin(ctx context.Context, in *PwdLoginReq, out *LoginResponse) error {
	return h.UserServiceHandler.PwdLogin(ctx, in, out)
}

func (h *userServiceHandler) VerifyCodeLogin(ctx context.Context, in *VerifyCodeLoginReq, out *LoginResponse) error {
	return h.UserServiceHandler.VerifyCodeLogin(ctx, in, out)
}

func (h *userServiceHandler) Logout(ctx context.Context, in *LogoutReq, out *Response) error {
	return h.UserServiceHandler.Logout(ctx, in, out)
}

func (h *userServiceHandler) GetVerifyCode(ctx context.Context, in *VerifyCodeReq, out *VerifyCodeResponse) error {
	return h.UserServiceHandler.GetVerifyCode(ctx, in, out)
}
